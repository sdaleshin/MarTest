function done(e){e&&console.error(e.stack),mongoose.connection.db.dropDatabase(function(){mongoose.connection.close()})}var assert=require("assert"),mongoose=require("../../lib"),Schema=mongoose.Schema,ObjectId=mongoose.Types.ObjectId,dbname="testing_populateAdInfinitum_"+require("../lib/utils").random();mongoose.connect("localhost",dbname),mongoose.connection.on("error",function(){console.error("connection error",arguments)});var user=new Schema({name:String,friends:[{type:Schema.ObjectId,ref:"User"}]}),User=mongoose.model("User",user),blogpost=Schema({title:String,tags:[String],author:{type:Schema.ObjectId,ref:"User"}}),BlogPost=mongoose.model("BlogPost",blogpost);mongoose.connection.on("open",function(){var e=[new ObjectId,new ObjectId,new ObjectId,new ObjectId],t=[];t.push({_id:e[0],name:"mary",friends:[e[1],e[2],e[3]]}),t.push({_id:e[1],name:"bob",friends:[e[0],e[2],e[3]]}),t.push({_id:e[2],name:"joe",friends:[e[0],e[1],e[3]]}),t.push({_id:e[3],name:"sally",friends:[e[0],e[1],e[2]]}),User.create(t,function(t,n){assert.ifError(t);var r=[];r.push({title:"blog 1",tags:["fun","cool"],author:e[3]}),r.push({title:"blog 2",tags:["cool"],author:e[1]}),r.push({title:"blog 3",tags:["fun","odd"],author:e[2]}),BlogPost.create(r,function(e,t){assert.ifError(e),BlogPost.find({tags:"fun"}).lean().populate("author").exec(function(e,t){assert.ifError(e);var n={path:"author.friends",select:"name",options:{limit:2}};BlogPost.populate(t,n,function(e,t){assert.ifError(e),console.log("populated");var n=require("util").inspect(t,{depth:null});console.log(n),done()})})})})});