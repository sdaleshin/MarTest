/*!
 * Access driver.
 */

/*!
 * Module dependencies.
 */

/*!
 * Inherit from Buffer.
 */

/*!
 * Compile other Buffer methods marking this buffer as modified.
 */

/*!
 * Module exports.
 */

function MongooseBuffer(e,t,n){var r=arguments.length,i;0===r||null===arguments[0]||undefined===arguments[0]?i=0:i=e;var s,o,u;Array.isArray(t)?(o=t[0],u=t[1]):s=t;var a=new Buffer(i,s,n);return a.__proto__=MongooseBuffer.prototype,Object.defineProperties(a,{validators:{value:[]},_path:{value:o},_parent:{value:u}}),u&&"string"==typeof o&&Object.defineProperty(a,"_schema",{value:u.schema.path(o)}),a._subtype=0,a}var driver=global.MONGOOSE_DRIVER_PATH||"../drivers/node-mongodb-native",Binary=require(driver+"/binary");MongooseBuffer.prototype=new Buffer(0),MongooseBuffer.prototype._parent,MongooseBuffer.prototype._subtype,MongooseBuffer.prototype._markModified=function(){var e=this._parent;return e&&e.markModified(this._path),this},MongooseBuffer.prototype.write=function(){var e=Buffer.prototype.write.apply(this,arguments);return e>0&&this._markModified(),e},MongooseBuffer.prototype.copy=function(e){var t=Buffer.prototype.copy.apply(this,arguments);return e instanceof MongooseBuffer&&e._markModified(),t},"writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 writeFloat writeDouble fill utf8Write binaryWrite asciiWrite set writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE writeInt16LE writeInt16BE writeInt32LE writeInt32BE writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE".split(" ").forEach(function(e){if(!Buffer.prototype[e])return;MongooseBuffer.prototype[e]=new Function("var ret = Buffer.prototype."+e+".apply(this, arguments);"+"this._markModified();"+"return ret;")}),MongooseBuffer.prototype.toObject=function(e){var t="number"==typeof e?e:this._subtype||0;return new Binary(this,t)},MongooseBuffer.prototype.equals=function(e){if(!Buffer.isBuffer(e))return!1;if(this.length!==e.length)return!1;for(var t=0;t<this.length;++t)if(this[t]!==e[t])return!1;return!0},MongooseBuffer.prototype.subtype=function(e){if("number"!=typeof e)throw new TypeError("Invalid subtype. Expected a number");this._subtype!=e&&this._markModified(),this._subtype=e},MongooseBuffer.Binary=Binary,module.exports=MongooseBuffer;