/*!
 * Module dependencies.
 */

/*!
 * Protocol prefix regexp.
 *
 * @api private
 */

/*!
 * Inherit from EventEmitter
 */

/*!
 * Noop.
 */

/*!
 * Module exports.
 */

function Connection(e){this.base=e,this.collections={},this.models={},this.replica=!1,this.hosts=null,this.host=null,this.port=null,this.user=null,this.pass=null,this.name=null,this.options=null,this.otherDbs=[],this._readyState=STATES.disconnected,this._closeCalled=!1,this._hasOpened=!1}function noop(){}var url=require("url"),utils=require("./utils"),EventEmitter=require("events").EventEmitter,driver=global.MONGOOSE_DRIVER_PATH||"./drivers/node-mongodb-native",Model=require("./model"),Schema=require("./schema"),Collection=require(driver+"/collection"),STATES=require("./connectionstate"),MongooseError=require("./error"),assert=require("assert"),muri=require("muri"),rgxProtocol=/^(?:.)+:\/\//;Connection.prototype.__proto__=EventEmitter.prototype,Object.defineProperty(Connection.prototype,"readyState",{get:function(){return this._readyState},set:function(e){if(!(e in STATES))throw new Error("Invalid connection state: "+e);if(this._readyState!==e){this._readyState=e;for(var t=0;t<this.otherDbs.length;t++)this.otherDbs[t].readyState=e;STATES.connected===e&&(this._hasOpened=!0),this.emit(STATES[e])}}}),Connection.prototype.collections,Connection.prototype.db,Connection.prototype.open=function(e,t,n,r,i){var s=this,o,u;if("string"==typeof t)switch(arguments.length){case 2:n=27017;case 3:switch(typeof n){case"function":i=n,n=27017;break;case"object":r=n,n=27017}break;case 4:"function"==typeof r&&(i=r,r={})}else{switch(typeof t){case"function":i=t,t=undefined;break;case"object":r=t,t=undefined,i=n}rgxProtocol.test(e)||(e="mongodb://"+e);try{o=muri(e)}catch(a){return this.error(a,i),this}t=o.db,e=o.hosts[0].host||o.hosts[0].ipc,n=o.hosts[0].port||27017}this.options=this.parseOptions(r,o&&o.options);if(STATES.disconnected!==this.readyState){var a=new Error("Trying to open unclosed connection.");return a.state=this.readyState,this.error(a,i),this}if(!e)return this.error(new Error("Missing hostname."),i),this;if(!t)return this.error(new Error("Missing database name."),i),this;if(r&&r.user&&r.pass)this.user=r.user,this.pass=r.pass;else if(o&&o.auth)this.user=o.auth.user,this.pass=o.auth.pass;else if(/@/.test(e)&&/:/.test(e.split("@")[0])){e=e.split("@");var f=e.shift().split(":");e=e.pop(),this.user=f[0],this.pass=f[1]}else this.user=this.pass=undefined;return this.name=t,this.host=e,this.port=n,this._open(i),this},Connection.prototype.openSet=function(e,t,n,r){rgxProtocol.test(e)||(e="mongodb://"+e);var i=this;switch(arguments.length){case 3:switch(typeof t){case"string":this.name=t;break;case"object":r=n,n=t,t=null}"function"==typeof n&&(r=n,n={});break;case 2:switch(typeof t){case"string":this.name=t;break;case"function":r=t,t=null;break;case"object":n=t,t=null}}var s;try{s=muri(e)}catch(o){return this.error(o,r),this}return this.name||(this.name=s.db),this.hosts=s.hosts,this.options=this.parseOptions(n,s&&s.options),this.replica=!0,this.name?(n&&n.user&&n.pass?(this.user=n.user,this.pass=n.pass):s&&s.auth?(this.user=s.auth.user,this.pass=s.auth.pass):this.user=this.pass=undefined,this._open(r),this):(this.error(new Error("No database name provided for replica set"),r),this)},Connection.prototype.error=function(e,t){if(t)return t(e);this.emit("error",e)},Connection.prototype._open=function(e){this.readyState=STATES.connecting,this._closeCalled=!1;var t=this,n=this.replica?"doOpenSet":"doOpen";this[n](function(n){if(n){t.readyState=STATES.disconnected,t._hasOpened?e&&e(n):t.error(n,e);return}t.onOpen(e)})},Connection.prototype.onOpen=function(e){function n(n){if(n){t.readyState=STATES.disconnected,t._hasOpened?e&&e(n):t.error(n,e);return}t.readyState=STATES.connected;for(var r in t.collections)t.collections[r].onOpen();e&&e(),t.emit("open")}var t=this;t.user&&t.pass?t.db.authenticate(t.user,t.pass,t.options.auth,n):n()},Connection.prototype.close=function(e){var t=this;this._closeCalled=!0;switch(this.readyState){case 0:e&&e();break;case 1:this.readyState=STATES.disconnecting,this.doClose(function(n){n?t.error(n,e):(t.onClose(),e&&e())});break;case 2:this.once("open",function(){t.close(e)});break;case 3:if(!e)break;this.once("close",function(){e()})}return this},Connection.prototype.onClose=function(){this.readyState=STATES.disconnected;for(var e in this.collections)this.collections[e].onClose();this.emit("close")},Connection.prototype.collection=function(e,t){return e in this.collections||(this.collections[e]=new Collection(e,this,t)),this.collections[e]},Connection.prototype.model=function(e,t,n){"string"==typeof t&&(n=t,t=!1),utils.isObject(t)&&!(t instanceof Schema)&&(t=new Schema(t));if(this.models[e]&&!n){if(t instanceof Schema&&t!=this.models[e].schema)throw new MongooseError.OverwriteModelError(e);return this.models[e]}var r={cache:!1,connection:this},i;if(t instanceof Schema)return i=this.base.model(e,t,n,r),this.models[e]||(this.models[e]=i),i.init(),i;if(this.models[e]&&n){i=this.models[e],t=i.prototype.schema;var s=i.__subclass(this,t,n);return s}i=this.base.models[e];if(!i)throw new MongooseError.MissingSchemaError(e);return this!=i.prototype.db||!!n&&n!=i.collection.name?this.models[e]=i.__subclass(this,t,n):(this.models[e]||(this.models[e]=i),i)},Connection.prototype.modelNames=function(){return Object.keys(this.models)},Connection.prototype.setProfiling=function(e,t,n){if(STATES.connected!==this.readyState)return this.on("open",this.setProfiling.bind(this,e,t,n));n||(n=t,t=100);var r={};switch(e){case 0:case"off":r.profile=0;break;case 1:case"slow":r.profile=1,"number"!=typeof t&&(t=parseInt(t,10),isNaN(t)&&(t=100)),r.slowms=t;break;case 2:case"all":r.profile=2;break;default:return n(new Error("Invalid profiling level: "+e))}this.db.executeDbCommand(r,function(t,r){if(t)return n(t);var i=r.documents[0];t=1===i.ok?null:new Error("Could not set profiling level to: "+e),n(t,i)})},Connection.STATES=STATES,module.exports=Connection;