/*!
 * Module dependencies.
 */

/*!
 * Inherits from ArrayType.
 */

/*!
 * Scopes paths selected in a query to this array.
 * Necessary for proper default application of subdocument values.
 *
 * @param {DocumentArray} array - the array to scope `fields` paths
 * @param {Object|undefined} fields - the root fields selected in the query
 * @param {Boolean|undefined} init - if we are being created part of a query result
 */

/*!
 * Module exports.
 */

function DocumentArray(e,t,n){function r(){Subdocument.apply(this,arguments)}r.prototype.__proto__=Subdocument.prototype,r.prototype.$__setSchema(t),r.schema=t;for(var i in t.methods)r.prototype[i]=t.methods[i];for(var i in t.statics)r[i]=t.statics[i];r.options=n,this.schema=t,ArrayType.call(this,e,r,n),this.schema=t;var s=this.path,o=this.defaultValue;this.default(function(){var e=o.call(this);return Array.isArray(e)||(e=[e]),new MongooseDocumentArray(e,s,this)})}function scopePaths(e,t,n){if(!n||!t)return undefined;var r=e.path+".",i=Object.keys(t),s=i.length,o={},u,a;while(s--)a=i[s],0===a.indexOf(r)&&(u||(u=!0),o[a.substring(r.length)]=t[a]);return u&&o||undefined}var SchemaType=require("../schematype"),ArrayType=require("./array"),MongooseDocumentArray=require("../types/documentarray"),Subdocument=require("../types/embedded"),Document=require("../document");DocumentArray.prototype.__proto__=ArrayType.prototype,DocumentArray.prototype.doValidate=function(e,t,n){var r=this;SchemaType.prototype.doValidate.call(this,e,function(n){if(n)return t(n);var i=e&&e.length,s;if(!i)return t();for(var o=0,u=i;o<u;++o){var a=e[o];if(!a){--i||t();continue}(function(e){a.validate(function(n){if(n&&!s)return n.key=r.key+"."+e+"."+n.key,t(s=n);--i||t()})})(o)}},n)},DocumentArray.prototype.cast=function(e,t,n,r){var i,s,o;if(!Array.isArray(e))return this.cast([e],t,n,r);e instanceof MongooseDocumentArray||(e=new MongooseDocumentArray(e,this.path,t)),o=e.length;while(o--)!(e[o]instanceof Subdocument)&&e[o]&&(n?(i||(i=scopePaths(this,t.$__.selected,n)),s=new this.casterConstructor(null,e,!0,i),e[o]=s.init(e[o])):(r&&(s=r.id(e[o]._id))?s.set(e[o]):s=new this.casterConstructor(e[o],e),e[o]=s));return e},module.exports=DocumentArray;