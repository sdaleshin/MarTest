/*!
 * Module requirements.
 */

/*!
 * Inherits from SchemaType.
 */

/*!
 * Date Query casting.
 *
 * @api private
 */

/*!
 * Module exports.
 */

function SchemaDate(e,t){SchemaType.call(this,e,t)}function handleSingle(e){return this.cast(e)}function handleArray(e){var t=this;return e.map(function(e){return t.cast(e)})}var SchemaType=require("../schematype"),CastError=SchemaType.CastError,utils=require("../utils");SchemaDate.prototype.__proto__=SchemaType.prototype,SchemaDate.prototype.expires=function(e){if(!this._index||"Object"!==this._index.constructor.name)this._index={};return this._index.expires=e,utils.expires(this._index),this},SchemaDate.prototype.checkRequired=function(e){return e instanceof Date},SchemaDate.prototype.cast=function(e){if(e===null||e==="")return null;if(e instanceof Date)return e;var t;e instanceof Number||"number"==typeof e||String(e)==Number(e)?t=new Date(Number(e)):e.toString&&(t=new Date(e.toString()));if(t.toString()!="Invalid Date")return t;throw new CastError("date",e,this.path)},SchemaDate.prototype.$conditionalHandlers={$lt:handleSingle,$lte:handleSingle,$gt:handleSingle,$gte:handleSingle,$ne:handleSingle,$in:handleArray,$nin:handleArray,$all:handleArray},SchemaDate.prototype.castForQuery=function(e,t){var n;if(2!==arguments.length)return this.cast(e);n=this.$conditionalHandlers[e];if(!n)throw new Error("Can't use "+e+" with Date.");return n.call(this,t)},module.exports=SchemaDate;