/*!
 * Module dependencies.
 */

/*!
 * Inherits from SchemaType.
 */

/*!
 * ignore
 */

/*!
 * Module exports.
 */

function ObjectId(e,t){SchemaType.call(this,e,t,"ObjectID")}function handleSingle(e){return this.cast(e)}function handleArray(e){var t=this;return e.map(function(e){return t.cast(e)})}function defaultId(){return new oid}function resetId(e){return this.$__._id=null,e}var SchemaType=require("../schematype"),CastError=SchemaType.CastError,driver=global.MONGOOSE_DRIVER_PATH||"./../drivers/node-mongodb-native",oid=require("../types/objectid"),utils=require("../utils"),Document;ObjectId.prototype.__proto__=SchemaType.prototype,ObjectId.prototype.auto=function(e){return e&&(this.default(defaultId),this.set(resetId)),this},ObjectId.prototype.checkRequired=function(t,n){return SchemaType._isRef(this,t,n,!0)?null!=t:t instanceof oid},ObjectId.prototype.cast=function(e,t,n){if(SchemaType._isRef(this,e,t,n)){if(null==e)return e;Document||(Document=require("./../document"));if(e instanceof Document)return e.$__.wasPopulated=!0,e;if(e instanceof oid)return e;if(Buffer.isBuffer(e)||!utils.isObject(e))throw new CastError("ObjectId",e,this.path);var r=t.$__fullPath(this.path),i=t.ownerDocument?t.ownerDocument():t,s=i.populated(r,!0),o=new s.options.model(e);return o.$__.wasPopulated=!0,o}if(e===null)return e;if(e instanceof oid)return e;if(e._id&&e._id instanceof oid)return e._id;if(e.toString)try{return oid.createFromHexString(e.toString())}catch(u){throw new CastError("ObjectId",e,this.path)}throw new CastError("ObjectId",e,this.path)},ObjectId.prototype.$conditionalHandlers={$ne:handleSingle,$in:handleArray,$nin:handleArray,$gt:handleSingle,$lt:handleSingle,$gte:handleSingle,$lte:handleSingle,$all:handleArray},ObjectId.prototype.castForQuery=function(e,t){var n;if(arguments.length===2){n=this.$conditionalHandlers[e];if(!n)throw new Error("Can't use "+e+" with ObjectId.");return n.call(this,t)}return this.cast(e)},module.exports=ObjectId;