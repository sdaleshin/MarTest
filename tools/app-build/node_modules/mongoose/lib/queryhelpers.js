/*!
 * Module dependencies
 */

/*!
 * Prepare a set of path options for query population.
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */

/*!
 * Prepare a set of path options for query population. This is the MongooseQuery
 * version
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */

/*!
 * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,
 * it returns an instance of the given model.
 *
 * @param {Model}  model
 * @param {Object} doc
 * @param {Object} fields
 *
 * @return {Model}
 */

/*!
 * Set each path query option to lean
 *
 * @param {Object} option
 */

function makeLean(e){e.options||(e.options={}),e.options.lean=!0}var utils=require("./utils");exports.preparePopulationOptions=function(t,n){var r=utils.object.vals(t.options.populate);return n.lean&&r.forEach(makeLean),r},exports.preparePopulationOptionsMQ=function(t,n){var r=utils.object.vals(t._mongooseOptions.populate);return n.lean&&r.forEach(makeLean),r},exports.createModel=function(t,n,r){var i=t.schema?t.schema.discriminatorMapping:null,s=i&&i.isRoot?i.key:null;return s&&n[s]&&t.discriminators&&t.discriminators[n[s]]?new t.discriminators[n[s]](undefined,r,!0):new t(undefined,r,!0)};