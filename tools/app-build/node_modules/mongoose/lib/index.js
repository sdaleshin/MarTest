/*!
 * Module dependencies.
 */

/*!
 * Warn users if they are running an unstable release.
 *
 * Disable the warning by setting the MONGOOSE_DISABLE_STABILITY_WARNING
 * environment variable.
 */

/*!
 * ReplSet connection string check.
 */

/*!
 * Driver depentend APIs
 */

/*!
 * Connection
 */

/*!
 * Collection
 */

/*!
 * The exports object is an instance of Mongoose.
 *
 * @api public
 */

function Mongoose(){this.connections=[],this.plugins=[],this.models={},this.modelSchemas={},this.options={pluralization:!0},this.createConnection()}var Schema=require("./schema"),SchemaType=require("./schematype"),VirtualType=require("./virtualtype"),SchemaDefaults=require("./schemadefault"),Types=require("./types"),Query=require("./query"),Promise=require("./promise"),Model=require("./model"),Document=require("./document"),utils=require("./utils"),format=utils.toCollectionName,mongodb=require("mongodb"),pkg=require("../package.json");pkg.publishConfig&&"unstable"==pkg.publishConfig.tag&&(process.env.MONGOOSE_DISABLE_STABILITY_WARNING||(console.log("[33m"),console.log("##############################################################"),console.log("#"),console.log("#   !!! MONGOOSE WARNING !!!"),console.log("#"),console.log("#   This is an UNSTABLE release of Mongoose."),console.log("#   Unstable releases are available for preview/testing only."),console.log("#   DO NOT run this in production."),console.log("#"),console.log("##############################################################"),console.log("[0m"))),Mongoose.prototype.set=function(e,t){return arguments.length==1?this.options[e]:(this.options[e]=t,this)},Mongoose.prototype.get=Mongoose.prototype.set;var rgxReplSet=/^.+,.+$/;Mongoose.prototype.createConnection=function(){var e=new Connection(this);return this.connections.push(e),arguments.length&&(rgxReplSet.test(arguments[0])?e.openSet.apply(e,arguments):e.open.apply(e,arguments)),e},Mongoose.prototype.connect=function(){var e=this.connection;return rgxReplSet.test(arguments[0])?e.openSet.apply(e,arguments):e.open.apply(e,arguments),this},Mongoose.prototype.disconnect=function(e){var t=this.connections.length,n;return this.connections.forEach(function(r){r.close(function(r){if(n)return;if(r){n=r;if(e)return e(r);throw r}e&&(--t||e())})}),this},Mongoose.prototype.model=function(e,t,n,r){"string"==typeof t&&(n=t,t=!1),utils.isObject(t)&&!(t instanceof Schema)&&(t=new Schema(t)),"boolean"==typeof n&&(r=n,n=null);var i;r&&utils.isObject(r)?(i=r,r=!0):i={};if(!this.modelSchemas[e]){!t&&e in SchemaDefaults&&(t=SchemaDefaults[e]);if(!t)throw new mongoose.Error.MissingSchemaError(e);this.modelSchemas[e]=t,this._applyPlugins(t)}var s,o;if(this.models[e]&&!1!==i.cache){if(t instanceof Schema&&t!=this.models[e].schema)throw new mongoose.Error.OverwriteModelError(e);return n?(s=this.models[e],t=s.prototype.schema,o=s.__subclass(this.connection,t,n),o):this.models[e]}if(!t){t=this.modelSchemas[e];if(!t)throw new mongoose.Error.MissingSchemaError(e)}"pluralization"in t.options||(t.options.pluralization=this.options.pluralization),n||(n=t.get("collection")||format(e,t.options));var u=i.connection||this.connection;return s=Model.compile(e,t,n,u,this),r||s.init(),!1===i.cache?s:this.models[e]=s},Mongoose.prototype.modelNames=function(){var e=Object.keys(this.models);return e},Mongoose.prototype._applyPlugins=function(e){for(var t=0,n=this.plugins.length;t<n;t++)e.plugin(this.plugins[t][0],this.plugins[t][1])},Mongoose.prototype.plugin=function(e,t){return this.plugins.push([e,t]),this},Mongoose.prototype.__defineGetter__("connection",function(){return this.connections[0]});var driver=global.MONGOOSE_DRIVER_PATH||"./drivers/node-mongodb-native",Connection=require(driver+"/connection"),Collection=require(driver+"/collection");Mongoose.prototype.Collection=Collection,Mongoose.prototype.Connection=Connection,Mongoose.prototype.version=pkg.version,Mongoose.prototype.Mongoose=Mongoose,Mongoose.prototype.Schema=Schema,Mongoose.prototype.SchemaType=SchemaType,Mongoose.prototype.SchemaTypes=Schema.Types,Mongoose.prototype.VirtualType=VirtualType,Mongoose.prototype.Types=Types,Mongoose.prototype.Query=Query,Mongoose.prototype.Promise=Promise,Mongoose.prototype.Model=Model,Mongoose.prototype.Document=Document,Mongoose.prototype.Error=require("./error"),Mongoose.prototype.mongo=require("mongodb"),Mongoose.prototype.mquery=require("mquery");var mongoose=module.exports=exports=new Mongoose;