var BaseCommand=require("./base_command").BaseCommand,inherits=require("util").inherits,InsertCommand=exports.InsertCommand=function(e,t,n,r){BaseCommand.call(this),this.collectionName=t,this.documents=[],this.checkKeys=n==null?!0:n,this.db=e,this.flags=0,this.serializeFunctions=!1,r=r==null?{}:r,r["keepGoing"]!=null&&r.keepGoing&&(this.flags=1),r["continueOnError"]!=null&&r.continueOnError&&(this.flags=1),r["serializeFunctions"]!=null&&r.serializeFunctions&&(this.serializeFunctions=!0)};inherits(InsertCommand,BaseCommand),InsertCommand.OP_INSERT=2002,InsertCommand.prototype.add=function(e){if(Buffer.isBuffer(e)){var t=e[0]|e[1]<<8|e[2]<<16|e[3]<<24;if(t!=e.length){var n=new Error("insert raw message size does not match message header size ["+e.length+"] != ["+t+"]");throw n.name="MongoError",n}}return this.documents.push(e),this},InsertCommand.prototype.toBinary=function(e){if(!~this.collectionName.indexOf("\0")){var t=4+Buffer.byteLength(this.collectionName)+1+16;for(var n=0;n<this.documents.length;n++)Buffer.isBuffer(this.documents[n])?t+=this.documents[n].length:t+=this.db.bson.calculateObjectSize(this.documents[n],this.serializeFunctions,!0);if(!e.disableDriverBSONSizeCheck&&t>e.maxBsonSize)throw new Error("Document exceeds maximum allowed bson size of "+e.maxBsonSize+" bytes");if(e.disableDriverBSONSizeCheck&&t>e.maxMessageSizeBytes)throw new Error("Command exceeds maximum message size of "+e.maxMessageSizeBytes+" bytes");var r=0,i=new Buffer(t);i[r+3]=t>>24&255,i[r+2]=t>>16&255,i[r+1]=t>>8&255,i[r]=t&255,r+=4,i[r+3]=this.requestId>>24&255,i[r+2]=this.requestId>>16&255,i[r+1]=this.requestId>>8&255,i[r]=this.requestId&255,r+=4,i[r++]=0,i[r++]=0,i[r++]=0,i[r++]=0,i[r+3]=InsertCommand.OP_INSERT>>24&255,i[r+2]=InsertCommand.OP_INSERT>>16&255,i[r+1]=InsertCommand.OP_INSERT>>8&255,i[r]=InsertCommand.OP_INSERT&255,r+=4,i[r+3]=this.flags>>24&255,i[r+2]=this.flags>>16&255,i[r+1]=this.flags>>8&255,i[r]=this.flags&255,r+=4,r=r+i.write(this.collectionName,r,"utf8")+1,i[r-1]=0;for(var n=0;n<this.documents.length;n++){var s=0,o=this.documents[n];Buffer.isBuffer(o)?(s=o.length,o.copy(i,r)):s=this.db.bson.serializeWithBufferAndIndex(o,this.checkKeys,i,r,this.serializeFunctions)-r+1,i[r+3]=s>>24&255,i[r+2]=s>>16&255,i[r+1]=s>>8&255,i[r]=s&255,r+=s,i[r-1]=0}return i}throw new Error("namespace cannot contain a null character")};