var muri=require("../"),assert=require("assert");describe("muri",function(){it("must begin with mongodb://",function(e){assert.throws(function(){muri("localhost:27017")},/Invalid mongodb uri/),assert.doesNotThrow(function(){muri("mongodb://localhost:27017")}),e()}),describe("user:password",function(e){it("is optional",function(e){var t="mongodb://local:27017",n=muri(t);assert.ok(!n.auth),e()}),it("parses properly",function(e){var t="mongodb://user:password@local:27017",n=muri(t);assert.ok(n.auth),assert.equal("user",n.auth.user),assert.equal("password",n.auth.pass),e()}),it("handles # in the username",function(e){var t="mongodb://us#er:password@local:27017",n=muri(t);assert.ok(n.auth),assert.equal("us#er",n.auth.user),assert.equal("password",n.auth.pass),e()}),it("handles # in the password",function(e){var t="mongodb://user:pa#ssword@local:27017",n=muri(t);assert.ok(n.auth),assert.equal("user",n.auth.user),assert.equal("pa#ssword",n.auth.pass),e()})}),describe("host",function(){it("must be specified",function(e){assert.throws(function(){muri("mongodb://")},/Missing host/),assert.throws(function(){muri("mongodb:///fake")},/Missing host/),assert.throws(function(){muri("mongodb://?yep")},/Missing host/),assert.throws(function(){muri("mongodb:///?yep")},/Missing host/);var t=muri("mongodb://local");assert.ok(Array.isArray(t.hosts)),assert.equal(1,t.hosts.length),assert.equal("local",t.hosts[0].host),e()}),it("supports replica sets",function(e){var t=muri("mongodb://local:27017,remote:27018,japan:99999");assert.ok(Array.isArray(t.hosts)),assert.equal(3,t.hosts.length),assert.equal("local",t.hosts[0].host),assert.equal(27017,t.hosts[0].port),assert.equal("remote",t.hosts[1].host),assert.equal(27018,t.hosts[1].port),assert.equal("japan",t.hosts[2].host),assert.equal(99999,t.hosts[2].port),e()})}),describe("port",function(){describe("with single host",function(){it("defaults to 27017 if not specified",function(e){var t=muri("mongodb://local/");assert.equal(27017,t.hosts[0].port),e()}),it("uses what is specified",function(e){var t=muri("mongodb://local:27018");assert.equal(27018,t.hosts[0].port),e()})}),describe("with replica sets",function(){var e;before(function(){e=muri("mongodb://local,remote:27018,another")}),it("defaults to 27017 if not specified",function(t){assert.equal(27017,e.hosts[0].port),assert.equal(27017,e.hosts[2].port),t()}),it("uses what is specified",function(t){assert.equal(27018,e.hosts[1].port),t()})})}),describe("database",function(){it("default",function(e){var t=muri("mongodb://localhost/");assert.equal("test",t.db);var t=muri("mongodb://localhost");assert.equal("test",t.db),e()}),it("is overridable",function(e){var t=muri("mongodb://localhost,a,x:34343,b/muri");assert.equal("muri",t.db),e()}),it("works with multiple specified protocols",function(e){var t="mongodb://localhost:27020/testing,mongodb://localhost:27019,mongodb://localhost:27018",n=muri(t);assert.equal("testing",n.db),e()})}),describe("querystring separator",function(){it("can be ; ",function(e){var t=muri("mongodb://muri/?replicaSet=myreplset;slaveOk=true;x=1");assert.ok(t.options),assert.equal(!0,t.options.slaveOk),assert.equal("myreplset",t.options.replicaSet),assert.equal(1,t.options.x),e()}),it("can be & ",function(e){var t=muri("mongodb://muri/?replicaSet=myreplset&slaveOk=true&x=1");assert.ok(t.options),assert.equal(!0,t.options.slaveOk),assert.equal("myreplset",t.options.replicaSet),assert.equal(1,t.options.x),e()})}),describe("readPref tags",function(){describe("with & ",function(){it("mongodb://localhost/?readPreferenceTags=dc:ny",function(e){var t=muri("mongodb://localhost/?readPreferenceTags=dc:ny");assert.equal("test",t.db),assert.deepEqual([{dc:"ny"}],t.options.readPreferenceTags),e()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1",function(e){var t=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1");assert.deepEqual([{dc:"ny",rack:1}],t.options.readPreferenceTags),e()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2",function(e){var t=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],t.options.readPreferenceTags),e()}),it("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2&readPreferenceTags=",function(e){var t=muri("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2&readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],t.options.readPreferenceTags),e()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags=",function(e){var t=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"ny"}],t.options.readPreferenceTags),e()})}),describe("with ; ",function(){it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2",function(e){var t=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],t.options.readPreferenceTags),e()}),it("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2;readPreferenceTags=",function(e){var t=muri("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2;readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],t.options.readPreferenceTags),e()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:ny;readPreferenceTags=",function(e){var t=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:ny;readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"ny"}],t.options.readPreferenceTags),e()})})}),describe("unix domain sockets",function(){it("without auth",function(e){var t=muri("mongodb:///tmp/mongodb-27017.sock?safe=false");assert.equal(t.db,"test"),assert.ok(Array.isArray(t.hosts)),assert.equal(1,t.hosts.length),assert.equal(t.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(t.hosts[0].host,undefined),assert.equal(t.hosts[0].port,undefined),assert.equal(!1,t.options.safe),e()}),it("without auth with a database name",function(e){var t=muri("mongodb:///tmp/mongodb-27017.sock/tester?safe=false");assert.equal(t.db,"tester"),assert.ok(Array.isArray(t.hosts)),assert.equal(1,t.hosts.length),assert.equal(t.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(t.hosts[0].host,undefined),assert.equal(t.hosts[0].port,undefined),assert.equal(!1,t.options.safe),e()}),it("with auth",function(e){var t=muri("mongodb://user:password@/tmp/mongodb-27017.sock?safe=false");assert.equal(t.db,"admin"),assert.ok(Array.isArray(t.hosts)),assert.equal(1,t.hosts.length),assert.equal(t.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(t.hosts[0].host,undefined),assert.equal(t.hosts[0].port,undefined),assert.equal(!1,t.options.safe),e()}),it("with auth with a db name",function(e){var t=muri("mongodb://user:password@/tmp/mongodb-27017.sock/tester?safe=false");assert.equal(t.db,"tester"),assert.ok(Array.isArray(t.hosts)),assert.equal(1,t.hosts.length),assert.equal(t.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(t.hosts[0].host,undefined),assert.equal(t.hosts[0].port,undefined),assert.equal(!1,t.options.safe),e()}),it("with auth + repl sets",function(e){var t=muri("mongodb://user:password@/tmp/mongodb-27017.sock,/tmp/another-27018.sock?safe=false");assert.equal(t.db,"admin"),assert.ok(Array.isArray(t.hosts)),assert.equal(2,t.hosts.length),assert.equal(t.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(t.hosts[0].host,undefined),assert.equal(t.hosts[0].port,undefined),assert.equal(t.hosts[1].ipc,"/tmp/another-27018.sock"),assert.equal(t.hosts[1].host,undefined),assert.equal(t.hosts[1].port,undefined),assert.equal(!1,t.options.safe),e()}),it("with auth + repl sets with a db name",function(e){var t=muri("mongodb://user:password@/tmp/mongodb-27017.sock,/tmp/another-27018.sock/tester?safe=false");assert.equal(t.db,"tester"),assert.ok(Array.isArray(t.hosts)),assert.equal(2,t.hosts.length),assert.equal(t.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(t.hosts[0].host,undefined),assert.equal(t.hosts[0].port,undefined),assert.equal(t.hosts[1].ipc,"/tmp/another-27018.sock"),assert.equal(t.hosts[1].host,undefined),assert.equal(t.hosts[1].port,undefined),assert.equal(!1,t.options.safe),e()})}),it("all together now",function(e){var t="mongodb://u#ser:pas#s@local,remote:27018,japan:27019/neatdb";t+="?replicaSet=myreplset&journal=true&w=2&wtimeoutMS=50";var n=muri(t);assert.equal("u#ser",n.auth.user),assert.equal("pas#s",n.auth.pass),assert.equal("neatdb",n.db),assert.equal(3,n.hosts.length),assert.equal("local",n.hosts[0].host),assert.strictEqual(27017,n.hosts[0].port),assert.equal("remote",n.hosts[1].host),assert.strictEqual(27018,n.hosts[1].port),assert.equal("japan",n.hosts[2].host),assert.strictEqual(27019,n.hosts[2].port),assert.equal("myreplset",n.options.replicaSet),assert.equal(!0,n.options.journal),assert.equal(50,n.options.wtimeoutMS),e()}),it("has a version",function(e){assert.ok(muri.version),e()})});