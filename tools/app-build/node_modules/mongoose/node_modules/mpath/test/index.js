function log(e){console.log(),console.log(require("util").inspect(e,!1,1e3))}var mpath=require("../"),assert=require("assert"),special="_doc";describe("mpath",function(){function e(){var e={first:{second:{third:[3,{name:"aaron"},9]}}};return e.comments=[{name:"one"},{name:"two",_doc:{name:"2"}},{name:"three",comments:[{},{comments:[{val:"twoo"}]}],_doc:{name:"3",comments:[{},{_doc:{comments:[{val:2}]}}]}}],e.name="jiro",e.array=[{o:{array:[{x:{b:[4,6,8]}},{y:10}]}},{o:{array:[{x:{b:[1,2,3]}},{x:{z:10}},{x:{b:"hi"}}]}},{o:{array:[{x:{b:null}},{x:{b:[null,1]}}]}},{o:{array:[{x:null}]}},{o:{array:[{y:3}]}},{o:{array:[3,0,null]}},{o:{name:"ha"}}],e.arr=[{arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0}],e}describe("get",function(){var t=e();it("`path` must be a string or array",function(e){assert.throws(function(){mpath.get({},t)},/Must be either string or array/),assert.throws(function(){mpath.get(4,t)},/Must be either string or array/),assert.throws(function(){mpath.get(function(){},t)},/Must be either string or array/),assert.throws(function(){mpath.get(/asdf/,t)},/Must be either string or array/),assert.throws(function(){mpath.get(Math,t)},/Must be either string or array/),assert.throws(function(){mpath.get(Buffer,t)},/Must be either string or array/),assert.doesNotThrow(function(){mpath.get("string",t)}),assert.doesNotThrow(function(){mpath.get([],t)}),e()}),describe("without `special`",function(){it("works",function(e){assert.equal("jiro",mpath.get("name",t)),assert.deepEqual({second:{third:[3,{name:"aaron"},9]}},mpath.get("first",t)),assert.deepEqual({third:[3,{name:"aaron"},9]},mpath.get("first.second",t)),assert.deepEqual([3,{name:"aaron"},9],mpath.get("first.second.third",t)),assert.deepEqual(3,mpath.get("first.second.third.0",t)),assert.deepEqual(9,mpath.get("first.second.third.2",t)),assert.deepEqual({name:"aaron"},mpath.get("first.second.third.1",t)),assert.deepEqual("aaron",mpath.get("first.second.third.1.name",t)),assert.deepEqual([{name:"one"},{name:"two",_doc:{name:"2"}},{name:"three",comments:[{},{comments:[{val:"twoo"}]}],_doc:{name:"3",comments:[{},{_doc:{comments:[{val:2}]}}]}}],mpath.get("comments",t)),assert.deepEqual({name:"one"},mpath.get("comments.0",t)),assert.deepEqual("one",mpath.get("comments.0.name",t)),assert.deepEqual("two",mpath.get("comments.1.name",t)),assert.deepEqual("three",mpath.get("comments.2.name",t)),assert.deepEqual([{},{comments:[{val:"twoo"}]}],mpath.get("comments.2.comments",t)),assert.deepEqual({comments:[{val:"twoo"}]},mpath.get("comments.2.comments.1",t)),assert.deepEqual("twoo",mpath.get("comments.2.comments.1.comments.0.val",t)),e()}),it("handles array.property dot-notation",function(e){assert.deepEqual(["one","two","three"],mpath.get("comments.name",t)),e()}),it("handles array.array notation",function(e){assert.deepEqual([undefined,undefined,[{},{comments:[{val:"twoo"}]}]],mpath.get("comments.comments",t)),e()}),it("handles prop.prop.prop.arrayProperty notation",function(e){assert.deepEqual([undefined,"aaron",undefined],mpath.get("first.second.third.name",t)),assert.deepEqual([1,"aaron",1],mpath.get("first.second.third.name",t,function(e){return undefined===e?1:e})),e()}),it("handles array.prop.array",function(e){assert.deepEqual([[{x:{b:[4,6,8]}},{y:10}],[{x:{b:[1,2,3]}},{x:{z:10}},{x:{b:"hi"}}],[{x:{b:null}},{x:{b:[null,1]}}],[{x:null}],[{y:3}],[3,0,null],undefined],mpath.get("array.o.array",t)),e()}),it("handles array.prop.array.index",function(e){assert.deepEqual([{x:{b:[4,6,8]}},{x:{b:[1,2,3]}},{x:{b:null}},{x:null},{y:3},3,undefined],mpath.get("array.o.array.0",t)),e()}),it("handles array.prop.array.index.prop",function(e){assert.deepEqual([{b:[4,6,8]},{b:[1,2,3]},{b:null},null,undefined,undefined,undefined],mpath.get("array.o.array.0.x",t)),e()}),it("handles array.prop.array.prop",function(e){assert.deepEqual([[undefined,10],[undefined,undefined,undefined],[undefined,undefined],[undefined],[3],[undefined,undefined,undefined],undefined],mpath.get("array.o.array.y",t)),assert.deepEqual([[{b:[4,6,8]},undefined],[{b:[1,2,3]},{z:10},{b:"hi"}],[{b:null},{b:[null,1]}],[null],[undefined],[undefined,undefined,undefined],undefined],mpath.get("array.o.array.x",t)),e()}),it("handles array.prop.array.prop.prop",function(e){assert.deepEqual([[[4,6,8],undefined],[[1,2,3],undefined,"hi"],[null,[null,1]],[null],[undefined],[undefined,undefined,undefined],undefined],mpath.get("array.o.array.x.b",t)),e()}),it("handles array.prop.array.prop.prop.index",function(e){assert.deepEqual([[6,undefined],[2,undefined,"i"],[null,1],[null],[undefined],[undefined,undefined,undefined],undefined],mpath.get("array.o.array.x.b.1",t)),assert.deepEqual([[6,0],[2,0,"i"],[null,1],[null],[0],[0,0,0],0],mpath.get("array.o.array.x.b.1",t,function(e){return undefined===e?0:e})),e()}),it("handles array.index.prop.prop",function(e){assert.deepEqual([{x:{b:[1,2,3]}},{x:{z:10}},{x:{b:"hi"}}],mpath.get("array.1.o.array",t)),assert.deepEqual(["hi","hi","hi"],mpath.get("array.1.o.array",t,function(e){return Array.isArray(e)?e.map(function(e){return"hi"}):e})),e()}),it("handles array.array.index",function(e){assert.deepEqual([{a:{c:48}},undefined],mpath.get("arr.arr.1",t)),assert.deepEqual(["woot",undefined],mpath.get("arr.arr.1",t,function(e){return e&&e.a&&e.a.c?"woot":e})),e()}),it("handles array.array.index.prop",function(e){assert.deepEqual([{c:48},"woot"],mpath.get("arr.arr.1.a",t,function(e){return undefined===e?"woot":e})),assert.deepEqual([{c:48},undefined],mpath.get("arr.arr.1.a",t)),mpath.set("arr.arr.1.a",[{c:49},undefined],t),assert.deepEqual([{c:49},undefined],mpath.get("arr.arr.1.a",t)),mpath.set("arr.arr.1.a",[{c:48},undefined],t),e()}),it("handles array.array.index.prop.prop",function(e){assert.deepEqual([48,undefined],mpath.get("arr.arr.1.a.c",t)),assert.deepEqual([48,"woot"],mpath.get("arr.arr.1.a.c",t,function(e){return undefined===e?"woot":e})),e()})}),describe("with `special`",function(){it("works",function(e){assert.equal("jiro",mpath.get("name",t,special)),assert.deepEqual({second:{third:[3,{name:"aaron"},9]}},mpath.get("first",t,special)),assert.deepEqual({third:[3,{name:"aaron"},9]},mpath.get("first.second",t,special)),assert.deepEqual([3,{name:"aaron"},9],mpath.get("first.second.third",t,special)),assert.deepEqual(3,mpath.get("first.second.third.0",t,special)),assert.deepEqual(4,mpath.get("first.second.third.0",t,special,function(e){return 3===e?4:e})),assert.deepEqual(9,mpath.get("first.second.third.2",t,special)),assert.deepEqual({name:"aaron"},mpath.get("first.second.third.1",t,special)),assert.deepEqual("aaron",mpath.get("first.second.third.1.name",t,special)),assert.deepEqual([{name:"one"},{name:"two",_doc:{name:"2"}},{name:"three",comments:[{},{comments:[{val:"twoo"}]}],_doc:{name:"3",comments:[{},{_doc:{comments:[{val:2}]}}]}}],mpath.get("comments",t,special)),assert.deepEqual({name:"one"},mpath.get("comments.0",t,special)),assert.deepEqual("one",mpath.get("comments.0.name",t,special)),assert.deepEqual("2",mpath.get("comments.1.name",t,special)),assert.deepEqual("3",mpath.get("comments.2.name",t,special)),assert.deepEqual("nice",mpath.get("comments.2.name",t,special,function(e){return"3"===e?"nice":e})),assert.deepEqual([{},{_doc:{comments:[{val:2}]}}],mpath.get("comments.2.comments",t,special)),assert.deepEqual({_doc:{comments:[{val:2}]}},mpath.get("comments.2.comments.1",t,special)),assert.deepEqual(2,mpath.get("comments.2.comments.1.comments.0.val",t,special)),e()}),it("handles array.property dot-notation",function(e){assert.deepEqual(["one","2","3"],mpath.get("comments.name",t,special)),assert.deepEqual(["one",2,"3"],mpath.get("comments.name",t,special,function(e){return"2"===e?2:e})),e()}),it("handles array.array notation",function(e){assert.deepEqual([undefined,undefined,[{},{_doc:{comments:[{val:2}]}}]],mpath.get("comments.comments",t,special)),e()}),it("handles array.array.index.array",function(e){assert.deepEqual([undefined,undefined,[{val:2}]],mpath.get("comments.comments.1.comments",t,special)),e()}),it("handles array.array.index.array.prop",function(e){assert.deepEqual([undefined,undefined,[2]],mpath.get("comments.comments.1.comments.val",t,special)),assert.deepEqual(["nil","nil",[2]],mpath.get("comments.comments.1.comments.val",t,special,function(e){return undefined===e?"nil":e})),e()})})}),describe("set",function(){describe("without `special`",function(){var t=e();it("works",function(e){mpath.set("name","a new val",t,function(e){return"a new val"===e?"changed":e}),assert.deepEqual("changed",t.name),mpath.set("name","changed",t),assert.deepEqual("changed",t.name),mpath.set("first.second.third",[1,{name:"x"},9],t),assert.deepEqual([1,{name:"x"},9],t.first.second.third),mpath.set("first.second.third.1.name","y",t),assert.deepEqual([1,{name:"y"},9],t.first.second.third),mpath.set("comments.1.name","ttwwoo",t),assert.deepEqual({name:"ttwwoo",_doc:{name:"2"}},t.comments[1]),mpath.set("comments.2.comments.1.comments.0.expand","added",t),assert.deepEqual({val:"twoo",expand:"added"},t.comments[2].comments[1].comments[0]),mpath.set("comments.2.comments.1.comments.2","added",t),assert.equal(3,t.comments[2].comments[1].comments.length),assert.deepEqual({val:"twoo",expand:"added"},t.comments[2].comments[1].comments[0]),assert.deepEqual(undefined,t.comments[2].comments[1].comments[1]),assert.deepEqual("added",t.comments[2].comments[1].comments[2]),e()}),describe("array.path",function(){describe("with single non-array value",function(){it("works",function(e){mpath.set("arr.yep",!1,t,function(e){return!1===e?!0:e}),assert.deepEqual([{yep:!0,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0}],t.arr),mpath.set("arr.yep",!1,t),assert.deepEqual([{yep:!1,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!1}],t.arr),e()})}),describe("with array of values",function(){it("that are equal in length",function(e){mpath.set("arr.yep",["one",2],t,function(e){return"one"===e?1:e}),assert.deepEqual([{yep:1,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:2}],t.arr),mpath.set("arr.yep",["one",2],t),assert.deepEqual([{yep:"one",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:2}],t.arr),e()}),it("that is less than length",function(e){mpath.set("arr.yep",[47],t,function(e){return 47===e?4:e}),assert.deepEqual([{yep:4,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:2}],t.arr),mpath.set("arr.yep",[47],t),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:2}],t.arr),e()}),it("that is greater than length",function(e){mpath.set("arr.yep",[5,6,7],t,function(e){return 5===e?"five":e}),assert.deepEqual([{yep:"five",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:6}],t.arr),mpath.set("arr.yep",[5,6,7],t),assert.deepEqual([{yep:5,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:6}],t.arr),e()})})}),describe("array.$.path",function(){describe("with single non-array value",function(){it("copies the value to each item in array",function(e){mpath.set("arr.$.yep",{xtra:"double good"},t,function(e){return e&&e.xtra?"hi":e}),assert.deepEqual([{yep:"hi",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:"hi"}],t.arr),mpath.set("arr.$.yep",{xtra:"double good"},t),assert.deepEqual([{yep:{xtra:"double good"},arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:{xtra:"double good"}}],t.arr),e()})}),describe("with array of values",function(){it("copies the value to each item in array",function(e){mpath.set("arr.$.yep",[15],t,function(e){return e.length===1?[]:e}),assert.deepEqual([{yep:[],arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:[]}],t.arr),mpath.set("arr.$.yep",[15],t),assert.deepEqual([{yep:[15],arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:[15]}],t.arr),e()})})}),describe("array.index.path",function(){it("works",function(e){mpath.set("arr.1.yep",0,t,function(e){return 0===e?"zero":e}),assert.deepEqual([{yep:[15],arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:"zero"}],t.arr),mpath.set("arr.1.yep",0,t),assert.deepEqual([{yep:[15],arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:0}],t.arr),e()})}),describe("array.index.array.path",function(){it("with single value",function(e){mpath.set("arr.0.arr.e",35,t,function(e){return 35===e?3:e}),assert.deepEqual([{yep:[15],arr:[{a:{b:47},e:3},{a:{c:48},e:3},{d:"yep",e:3}]},{yep:0}],t.arr),mpath.set("arr.0.arr.e",35,t),assert.deepEqual([{yep:[15],arr:[{a:{b:47},e:35},{a:{c:48},e:35},{d:"yep",e:35}]},{yep:0}],t.arr),e()}),it("with array",function(e){mpath.set("arr.0.arr.e",["a","b"],t,function(e){return"a"===e?"x":e}),assert.deepEqual([{yep:[15],arr:[{a:{b:47},e:"x"},{a:{c:48},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.0.arr.e",["a","b"],t),assert.deepEqual([{yep:[15],arr:[{a:{b:47},e:"a"},{a:{c:48},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()})}),describe("array.index.array.path.path",function(){it("with single value",function(e){mpath.set("arr.0.arr.a.b",36,t,function(e){return 36===e?3:e}),assert.deepEqual([{yep:[15],arr:[{a:{b:3},e:"a"},{a:{c:48,b:3},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.0.arr.a.b",36,t),assert.deepEqual([{yep:[15],arr:[{a:{b:36},e:"a"},{a:{c:48,b:36},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()}),it("with array",function(e){mpath.set("arr.0.arr.a.b",[1,2,3,4],t,function(e){return 2===e?"two":e}),assert.deepEqual([{yep:[15],arr:[{a:{b:1},e:"a"},{a:{c:48,b:"two"},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.0.arr.a.b",[1,2,3,4],t),assert.deepEqual([{yep:[15],arr:[{a:{b:1},e:"a"},{a:{c:48,b:2},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()})}),describe("array.index.array.$.path.path",function(){it("with single value",function(e){mpath.set("arr.0.arr.$.a.b","$",t,function(e){return"$"===e?"dolla billz":e}),assert.deepEqual([{yep:[15],arr:[{a:{b:"dolla billz"},e:"a"},{a:{c:48,b:"dolla billz"},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.0.arr.$.a.b","$",t),assert.deepEqual([{yep:[15],arr:[{a:{b:"$"},e:"a"},{a:{c:48,b:"$"},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()}),it("with array",function(e){mpath.set("arr.0.arr.$.a.b",[1],t,function(e){return Array.isArray(e)?{}:e}),assert.deepEqual([{yep:[15],arr:[{a:{b:{}},e:"a"},{a:{c:48,b:{}},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.0.arr.$.a.b",[1],t),assert.deepEqual([{yep:[15],arr:[{a:{b:[1]},e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()})}),describe("array.array.index.path",function(){it("with single value",function(e){mpath.set("arr.arr.0.a","single",t,function(e){return"single"===e?"double":e}),assert.deepEqual([{yep:[15],arr:[{a:"double",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.arr.0.a","single",t),assert.deepEqual([{yep:[15],arr:[{a:"single",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()}),it("with array",function(e){mpath.set("arr.arr.0.a",[4,8,15,16,23,42],t,function(e){return 4===e?3:e}),assert.deepEqual([{yep:[15],arr:[{a:3,e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:!1}],t.arr),mpath.set("arr.arr.0.a",[4,8,15,16,23,42],t),assert.deepEqual([{yep:[15],arr:[{a:4,e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:!1}],t.arr),e()})}),describe("array.array.$.index.path",function(){it("with single value",function(e){mpath.set("arr.arr.$.0.a","singles",t,function(e){return 0}),assert.deepEqual([{yep:[15],arr:[{a:0,e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.arr.$.0.a","singles",t),assert.deepEqual([{yep:[15],arr:[{a:"singles",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("$.arr.arr.0.a","single",t),assert.deepEqual([{yep:[15],arr:[{a:"single",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()}),it("with array",function(e){mpath.set("arr.arr.$.0.a",[4,8,15,16,23,42],t,function(e){return"nope"}),assert.deepEqual([{yep:[15],arr:[{a:"nope",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.arr.$.0.a",[4,8,15,16,23,42],t),assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42],e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.$.arr.0.a",[4,8,15,16,23,42,108],t),assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108],e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()})}),describe("array.array.path.index",function(){it("with single value",function(e){mpath.set("arr.arr.a.7",47,t,function(e){return 1}),assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108,1],e:"a"},{a:{c:48,b:[1],7:1},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),mpath.set("arr.arr.a.7",47,t),assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108,47],e:"a"},{a:{c:48,b:[1],7:47},e:"b"},{d:"yep",e:35}]},{yep:0}],t.arr),e()}),it("with array",function(e){t.arr[1].arr=[{a:[]},{a:[]},{a:null}],mpath.set("arr.arr.a.7",[[null,46],[undefined,"woot"]],t);var n=[],r=[];n[7]=undefined,r[7]="woot",assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:"a"},{a:{c:48,b:[1],7:46},e:"b"},{d:"yep",e:35}]},{yep:0,arr:[{a:n},{a:r},{a:null}]}],t.arr),e()})}),describe("handles array.array.path",function(){it("with single",function(e){t.arr[1].arr=[{},{}],assert.deepEqual([{},{}],t.arr[1].arr),t.arr.push({arr:"something else"}),t.arr.push({arr:["something else"]}),t.arr.push({arr:[[]]}),t.arr.push({arr:[5]});var n=[];n.e="xmas",mpath.set("arr.arr.e",47,t,function(e){return"xmas"}),assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:"xmas"},{a:{c:48,b:[1],7:46},e:"xmas"},{d:"yep",e:"xmas"}]},{yep:0,arr:[{e:"xmas"},{e:"xmas"}]},{arr:"something else"},{arr:["something else"]},{arr:[n]},{arr:[5]}],t.arr),n.e=47,mpath.set("arr.arr.e",47,t),assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:47},{a:{c:48,b:[1],7:46},e:47},{d:"yep",e:47}]},{yep:0,arr:[{e:47},{e:47}]},{arr:"something else"},{arr:["something else"]},{arr:[n]},{arr:[5]}],t.arr),e()}),it("with arrays",function(e){mpath.set("arr.arr.e",[[1,2,3],[4,5],null,[],[6],[7,8,9]],t,function(e){return 10});var n=[];n.e=10,assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:10},{a:{c:48,b:[1],7:46},e:10},{d:"yep",e:10}]},{yep:0,arr:[{e:10},{e:10}]},{arr:"something else"},{arr:["something else"]},{arr:[n]},{arr:[5]}],t.arr),mpath.set("arr.arr.e",[[1,2,3],[4,5],null,[],[6],[7,8,9]],t),n.e=6,assert.deepEqual([{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:1},{a:{c:48,b:[1],7:46},e:2},{d:"yep",e:3}]},{yep:0,arr:[{e:4},{e:5}]},{arr:"something else"},{arr:["something else"]},{arr:[n]},{arr:[5]}],t.arr),e()})})}),describe("with `special`",function(){var t=e();it("works",function(e){mpath.set("name","chan",t,special,function(e){return"hi"}),assert.deepEqual("hi",t.name),mpath.set("name","changer",t,special),assert.deepEqual("changer",t.name),mpath.set("first.second.third",[1,{name:"y"},9],t,special),assert.deepEqual([1,{name:"y"},9],t.first.second.third),mpath.set("first.second.third.1.name","z",t,special),assert.deepEqual([1,{name:"z"},9],t.first.second.third),mpath.set("comments.1.name","ttwwoo",t,special),assert.deepEqual({name:"two",_doc:{name:"ttwwoo"}},t.comments[1]),mpath.set("comments.2.comments.1.comments.0.expander","adder",t,special,function(e){return"super"}),assert.deepEqual({val:2,expander:"super"},t.comments[2]._doc.comments[1]._doc.comments[0]),mpath.set("comments.2.comments.1.comments.0.expander","adder",t,special),assert.deepEqual({val:2,expander:"adder"},t.comments[2]._doc.comments[1]._doc.comments[0]),mpath.set("comments.2.comments.1.comments.2","set",t,special),assert.equal(3,t.comments[2]._doc.comments[1]._doc.comments.length),assert.deepEqual({val:2,expander:"adder"},t.comments[2]._doc.comments[1]._doc.comments[0]),assert.deepEqual(undefined,t.comments[2]._doc.comments[1]._doc.comments[1]),assert.deepEqual("set",t.comments[2]._doc.comments[1]._doc.comments[2]),e()}),describe("array.path",function(){describe("with single non-array value",function(){it("works",function(e){t.arr[1]._doc={special:!0},mpath.set("arr.yep",!1,t,special,function(e){return"yes"}),assert.deepEqual([{yep:"yes",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0,_doc:{special:!0,yep:"yes"}}],t.arr),mpath.set("arr.yep",!1,t,special),assert.deepEqual([{yep:!1,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0,_doc:{special:!0,yep:!1}}],t.arr),e()})}),describe("with array of values",function(){it("that are equal in length",function(e){mpath.set("arr.yep",["one",2],t,special,function(e){return 2===e?20:e}),assert.deepEqual([{yep:"one",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0,_doc:{special:!0,yep:20}}],t.arr),mpath.set("arr.yep",["one",2],t,special),assert.deepEqual([{yep:"one",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0,_doc:{special:!0,yep:2}}],t.arr),e()}),it("that is less than length",function(e){mpath.set("arr.yep",[47],t,special,function(e){return 80}),assert.deepEqual([{yep:80,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0,_doc:{special:!0,yep:2}}],t.arr),mpath.set("arr.yep",[47],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},{yep:!0,_doc:{special:!0,yep:2}}],t.arr),t.arr[0]._doc={yep:46,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]},mpath.set("arr.yep",[20],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:20,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:2}}],t.arr),e()}),it("that is greater than length",function(e){mpath.set("arr.yep",[5,6,7],t,special,function(){return"x"}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:"x",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:"x"}}],t.arr),mpath.set("arr.yep",[5,6,7],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:5,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:6}}],t.arr),e()})})}),describe("array.$.path",function(){describe("with single non-array value",function(){it("copies the value to each item in array",function(e){mpath.set("arr.$.yep",{xtra:"double good"},t,special,function(e){return 9}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:9,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:9}}],t.arr),mpath.set("arr.$.yep",{xtra:"double good"},t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:{xtra:"double good"},arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:{xtra:"double good"}}}],t.arr),e()})}),describe("with array of values",function(){it("copies the value to each item in array",function(e){mpath.set("arr.$.yep",[15],t,special,function(e){return"array"}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:"array",arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:"array"}}],t.arr),mpath.set("arr.$.yep",[15],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:[15]}}],t.arr),e()})})}),describe("array.index.path",function(){it("works",function(e){mpath.set("arr.1.yep",0,t,special,function(e){return 1}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:1}}],t.arr),mpath.set("arr.1.yep",0,t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()})}),describe("array.index.array.path",function(){it("with single value",function(e){mpath.set("arr.0.arr.e",35,t,special,function(e){return 30}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:47},e:30},{a:{c:48},e:30},{d:"yep",e:30}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.0.arr.e",35,t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:47},e:35},{a:{c:48},e:35},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()}),it("with array",function(e){mpath.set("arr.0.arr.e",["a","b"],t,special,function(e){return"a"===e?"A":e}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:47},e:"A"},{a:{c:48},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.0.arr.e",["a","b"],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:47},e:"a"},{a:{c:48},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()})}),describe("array.index.array.path.path",function(){it("with single value",function(e){mpath.set("arr.0.arr.a.b",36,t,special,function(e){return 20}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:20},e:"a"},{a:{c:48,b:20},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.0.arr.a.b",36,t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:36},e:"a"},{a:{c:48,b:36},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()}),it("with array",function(e){mpath.set("arr.0.arr.a.b",[1,2,3,4],t,special,function(e){return e*2}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:2},e:"a"},{a:{c:48,b:4},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.0.arr.a.b",[1,2,3,4],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:1},e:"a"},{a:{c:48,b:2},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()})}),describe("array.index.array.$.path.path",function(){it("with single value",function(e){mpath.set("arr.0.arr.$.a.b","$",t,special,function(e){return"dollaz"}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:"dollaz"},e:"a"},{a:{c:48,b:"dollaz"},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.0.arr.$.a.b","$",t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:"$"},e:"a"},{a:{c:48,b:"$"},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()}),it("with array",function(e){mpath.set("arr.0.arr.$.a.b",[1],t,special,function(e){return{}}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:{}},e:"a"},{a:{c:48,b:{}},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.0.arr.$.a.b",[1],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:{b:[1]},e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()})}),describe("array.array.index.path",function(){it("with single value",function(e){mpath.set("arr.arr.0.a","single",t,special,function(e){return 88}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:88,e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.arr.0.a","single",t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:"single",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()}),it("with array",function(e){mpath.set("arr.arr.0.a",[4,8,15,16,23,42],t,special,function(e){return e*2}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:8,e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.arr.0.a",[4,8,15,16,23,42],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:4,e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()})}),describe("array.array.$.index.path",function(){it("with single value",function(e){mpath.set("arr.arr.$.0.a","singles",t,special,function(e){return e.toUpperCase()}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:"SINGLES",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.arr.$.0.a","singles",t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:"singles",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("$.arr.arr.0.a","single",t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:"single",e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()}),it("with array",function(e){mpath.set("arr.arr.$.0.a",[4,8,15,16,23,42],t,special,function(e){return Array}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:Array,e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.arr.$.0.a",[4,8,15,16,23,42],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42],e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.$.arr.0.a",[4,8,15,16,23,42,108],t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42,108],e:"a"},{a:{c:48,b:[1]},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()})}),describe("array.array.path.index",function(){it("with single value",function(e){mpath.set("arr.arr.a.7",47,t,special,function(e){return Object}),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42,108,Object],e:"a"},{a:{c:48,b:[1],7:Object},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),mpath.set("arr.arr.a.7",47,t,special),assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42,108,47],e:"a"},{a:{c:48,b:[1],7:47},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{special:!0,yep:0}}],t.arr),e()}),it("with array",function(e){t.arr[1]._doc.arr=[{a:[]},{a:[]},{a:null}],mpath.set("arr.arr.a.7",[[null,46],[undefined,"woot"]],t,special,function(e){return undefined===e?"nope":e});var n=[],r=[];n[7]="nope",r[7]="woot",assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:"a"},{a:{c:48,b:[1],7:46},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{arr:[{a:n},{a:r},{a:null}],special:!0,yep:0}}],t.arr),mpath.set("arr.arr.a.7",[[null,46],[undefined,"woot"]],t,special),n[7]=undefined,assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:"a"},{a:{c:48,b:[1],7:46},e:"b"},{d:"yep",e:35}]}},{yep:!0,_doc:{arr:[{a:n},{a:r},{a:null}],special:!0,yep:0}}],t.arr),e()})}),describe("handles array.array.path",function(){it("with single",function(e){t.arr[1]._doc.arr=[{},{}],assert.deepEqual([{},{}],t.arr[1]._doc.arr),t.arr.push({_doc:{arr:"something else"}}),t.arr.push({_doc:{arr:["something else"]}}),t.arr.push({_doc:{arr:[[]]}}),t.arr.push({_doc:{arr:[5]}}),mpath.set("arr.arr.e",47,t,special);var n=[];n.e=47,assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:47},{a:{c:48,b:[1],7:46},e:47},{d:"yep",e:47}]}},{yep:!0,_doc:{arr:[{e:47},{e:47}],special:!0,yep:0}},{_doc:{arr:"something else"}},{_doc:{arr:["something else"]}},{_doc:{arr:[n]}},{_doc:{arr:[5]}}],t.arr),e()}),it("with arrays",function(e){mpath.set("arr.arr.e",[[1,2,3],[4,5],null,[],[6],[7,8,9]],t,special);var n=[];n.e=6,assert.deepEqual([{yep:47,arr:[{a:{b:47}},{a:{c:48}},{d:"yep"}],_doc:{yep:[15],arr:[{a:[4,8,15,16,23,42,108,null],e:1},{a:{c:48,b:[1],7:46},e:2},{d:"yep",e:3}]}},{yep:!0,_doc:{arr:[{e:4},{e:5}],special:!0,yep:0}},{_doc:{arr:"something else"}},{_doc:{arr:["something else"]}},{_doc:{arr:[n]}},{_doc:{arr:[5]}}],t.arr),e()})})}),describe("get/set integration",function(){var t=e();it("works",function(e){var n=mpath.get("array.o.array.x.b",t);n[0][0][2]=10,n[1][0][1]=0,n[1][1]="Rambaldi",n[1][2]=[12,14],n[2]=[{changed:!0},[null,["changed","to","array"]]],mpath.set("array.o.array.x.b",n,t);var r=[{o:{array:[{x:{b:[4,6,10]}},{y:10}]}},{o:{array:[{x:{b:[1,0,3]}},{x:{b:"Rambaldi",z:10}},{x:{b:[12,14]}}]}},{o:{array:[{x:{b:{changed:!0}}},{x:{b:[null,["changed","to","array"]]}}]}},{o:{array:[{x:null}]}},{o:{array:[{y:3}]}},{o:{array:[3,0,null]}},{o:{name:"ha"}}];assert.deepEqual(r,t.array),e()}),it("array.prop",function(e){mpath.set("comments.name",["this","was","changed"],t),assert.deepEqual([{name:"this"},{name:"was",_doc:{name:"2"}},{name:"changed",comments:[{},{comments:[{val:"twoo"}]}],_doc:{name:"3",comments:[{},{_doc:{comments:[{val:2}]}}]}}],t.comments),mpath.set("comments.name",["also","changed","this"],t,special),assert.deepEqual([{name:"also"},{name:"was",_doc:{name:"changed"}},{name:"changed",comments:[{},{comments:[{val:"twoo"}]}],_doc:{name:"this",comments:[{},{_doc:{comments:[{val:2}]}}]}}],t.comments),e()})}),describe("multiple $ use",function(){var t=e();it("is ok",function(e){assert.doesNotThrow(function(){mpath.set("arr.$.arr.$.a",35,t)}),e()})}),it("ignores setting a nested path that doesnt exist",function(t){var n=e();assert.doesNotThrow(function(){mpath.set("thing.that.is.new",10,n)}),t()})})});