var assert=require("assert"),Promise=require("../lib/promise");describe("promise",function(){it("events fire right after fulfill()",function(e){var t=new Promise,n=0;t.on("fulfill",function(e,t){assert.equal(e,"1"),assert.equal(t,"2"),n++}),t.fulfill("1","2"),t.on("fulfill",function(e,t){assert.equal(e,"1"),assert.equal(t,"2"),n++}),assert.equal(2,n),e()}),it("events fire right after reject()",function(e){var t=new Promise,n=0;t.on("reject",function(e){assert.ok(e instanceof Error),n++}),t.reject(new Error("booyah")),t.on("reject",function(e){assert.ok(e instanceof Error),n++}),assert.equal(2,n),e()}),describe("onResolve()",function(){it("from constructor works",function(e){var t=0,n=new Promise(function(e){assert.ok(e instanceof Error),t++});n.reject(new Error("dawg")),assert.equal(1,t),e()}),it("after fulfill()",function(e){var t=new Promise,n=0;t.fulfill("woot"),t.onResolve(function(e,t){assert.equal(t,"woot"),n++}),t.onResolve(function(e,t){assert.strictEqual(e,null),n++}),assert.equal(2,n),e()})}),describe("onFulfill shortcut",function(){it("works",function(e){var t=new Promise,n=0;t.onFulfill(function(e){assert.strictEqual(e,undefined),n++}),t.fulfill(),assert.equal(1,n),e()})}),describe("onReject shortcut",function(){it("works",function(e){var t=new Promise,n=0;t.onReject(function(e){assert.ok(e instanceof Error),n++}),t.reject(new Error),assert.equal(1,n),e()})}),describe("return values",function(){it("on()",function(e){var t=new Promise;assert.ok(t.on("jump",function(){})instanceof Promise),e()}),it("onFulfill()",function(e){var t=new Promise;assert.ok(t.onFulfill(function(){})instanceof Promise),e()}),it("onReject()",function(e){var t=new Promise;assert.ok(t.onReject(function(){})instanceof Promise),e()}),it("onResolve()",function(e){var t=new Promise;assert.ok(t.onResolve(function(){})instanceof Promise),e()})}),describe("casting errors",function(){describe("reject()",function(){it("does not cast arguments to Error",function(e){var t=new Promise(function(t,n){assert.equal(3,t),e()});t.reject(3)})})}),describe("then",function(){describe("catching",function(){it("should not catch returned promise fulfillments",function(e){var t=new Promise,n=t.then(function(){return"step 1"});n.onFulfill(function(){throw new Error("fulfill threw me")}),n.reject=assert.ifError.bind(assert,new Error("reject should not have been called")),setTimeout(function(){assert.throws(function(){t.fulfill()},/fulfill threw me/),e()},10)}),it("can be disabled using .end()",function(e){var t=new Promise,n=t.then(function(){throw new Error("shucks")});n.end(),setTimeout(function(){try{t.fulfill()}catch(n){assert.ok(/shucks/.test(n)),e()}setTimeout(function(){e(new Error("error was swallowed"))},10)},10)})}),it("accepts multiple completion values",function(e){var t=new Promise;t.then(function(t,n){assert.equal(2,arguments.length),assert.equal("hi",t),assert.equal(4,n),e()},e).end(),t.fulfill("hi",4)})})});