var sliced=require("../"),assert=require("assert");describe("sliced",function(){it("exports a function",function(){assert.equal("function",typeof sliced)}),describe("with 1 arg",function(){it("returns an array of the arg",function(){var e=[3,"4",{}],t=sliced(e);assert.equal(3,t.length),assert.equal(e[0],t[0]),assert.equal(e[1],t[1]),assert.equal(e[1],t[1])})}),describe("with 2 args",function(){it("returns an array of the arg starting at the 2nd arg",function(){var e=[3,"4",5,null],t=sliced(e,2);assert.equal(2,t.length),assert.equal(e[2],t[0]),assert.equal(e[3],t[1])})}),describe("with 3 args",function(){it("returns an array of the arg from the 2nd to the 3rd arg",function(){var e=[3,"4",5,null],t=sliced(e,1,2);assert.equal(1,t.length),assert.equal(e[1],t[0])})}),describe("with negative start and no end",function(){it("begins at an offset from the end and includes all following elements",function(){var e=[3,"4",5,null],t=sliced(e,-2);assert.equal(2,t.length),assert.equal(e[2],t[0]),assert.equal(e[3],t[1]);var t=sliced(e,-12);assert.equal(4,t.length),assert.equal(e[0],t[0]),assert.equal(e[1],t[1])})}),describe("with negative start and positive end",function(){it("begins at an offset from the end and includes `end` elements",function(){var e=[3,"4",{x:1},null],t=sliced(e,-2,1);assert.equal(0,t.length);var t=sliced(e,-2,2);assert.equal(0,t.length);var t=sliced(e,-2,3);assert.equal(1,t.length),assert.equal(e[2],t[0])})}),describe("with negative start and negative end",function(){it("begins at `start` offset from the end and includes all elements up to `end` offset from the end",function(){var e=[3,"4",{x:1},null],t=sliced(e,-3,-1);assert.equal(2,t.length),assert.equal(e[1],t[0]),assert.equal(e[2],t[1]);var t=sliced(e,-3,-3);assert.equal(0,t.length);var t=sliced(e,-3,-4);assert.equal(0,t.length)})})});