function createFailingConnection(e){return{isRunning:!1,request:function(t,n,r){r({message:new ErrorNotConnected(e)})},close:function(){}}}function DebuggerClient(e){this._conn=createFailingConnection("node-inspector server was restarted"),this._port=e}function ErrorNotConnected(e){Error.call(this),this.name=ErrorNotConnected.name,this.message=e}var EventEmitter=require("events").EventEmitter,inherits=require("util").inherits,DebugConnection=require("./debugger.js");inherits(DebuggerClient,EventEmitter),Object.defineProperties(DebuggerClient.prototype,{isRunning:{get:function(){return this._conn.isRunning}}}),DebuggerClient.prototype.connect=function(){this._conn=DebugConnection.attachDebugger(this._port),this._conn.on("connect",this.emit.bind(this,"connect")).on("error",this.emit.bind(this,"error")).on("close",this._onConnectionClose.bind(this)),this._registerDebuggerEventHandlers("break","afterCompile","exception")},DebuggerClient.prototype._registerDebuggerEventHandlers=function(e){for(var t in arguments){var n=arguments[t];this._conn.on(n,this._emitDebuggerEvent.bind(this,n))}},DebuggerClient.prototype._onConnectionClose=function(e){this._conn=createFailingConnection(e),this.emit("close",e)},DebuggerClient.prototype._emitDebuggerEvent=function(e,t){this.emit(e,t.body)},DebuggerClient.prototype.request=function(e,t,n){typeof n!="function"&&(n=function(e){if(!e)return;console.log("Warning: ignored V8 debugger error. %s",e)}),this._conn.request(e,{arguments:t},function(e){var t;e.success?(t={},e.refs&&e.refs.forEach(function(e){t[e.handle]=e}),n(null,e.body,t)):n(e.message)})},DebuggerClient.prototype.close=function(){this._conn.close()},DebuggerClient.prototype.clearBreakpoint=function(e,t){this.request("clearbreakpoint",{breakpoint:e},t)},DebuggerClient.prototype.evaluateGlobal=function(e,t){var n="JSON.stringify("+e+").match(/.{1,80}/g).slice()";this.request("evaluate",{expression:n,global:!0},function(r,i,s){if(r)return t(r);if(i.type!="object"&&i.className!="Array")return t(new Error("Evaluate returned unexpected result: type: "+i.type+" className: "+i.className));var o=i.properties.filter(function(t){return/^\d+$/.test(t.name)}).map(function(t){return s[t.ref].value}).join("");try{t(null,JSON.parse(o))}catch(u){console.error('evaluateGlobal "%s" failed',e),console.error(u.stack),console.error("--json-begin--\n%s--json-end--",o),t(u)}})},DebuggerClient.prototype.getScriptSourceById=function(e,t){this.request("scripts",{includeSource:!0,types:4,ids:[e]},function(n,r){if(n)return t(n);var i=r.length>0?r[0].source:undefined;t(null,i)})},inherits(ErrorNotConnected,Error),exports.DebuggerClient=DebuggerClient,exports.ErrorNotConnected=ErrorNotConnected;