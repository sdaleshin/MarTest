function collectDefaultsFromDefinitions(){var e={};return Object.keys(definitions).forEach(function(t){var n=conversions.keyToCamelKey(t);e[n]=definitions[t].defaultValue}),e}function collectDefaultsFromJSONConfig(){var e={},t,n=path.join(__dirname,"../config.json");try{t=JSON.parse(fs.readFileSync(n))}catch(r){t={}}return Object.keys(t).forEach(function(n){var r=conversions.keyToDashedKey(n);e[r]=t[n]}),e}function loadDefaults(){var e=collectDefaultsFromDefinitions(),t=collectDefaultsFromJSONConfig();return Object.keys(t).forEach(function(n){e[n]=t[n]}),e}var fs=require("fs"),rc=require("rc"),path=require("path"),conversions={checkIfNull:function(e){return e&&e!=="null"?e:null},keyToCamelKey:function(e){return e.replace(/-(.)/g,function(e,t){return t.toUpperCase()})},keyToDashedKey:function(e){return e.replace(/([A-Z])/g,function(e,t){return"-"+t.toLowerCase()})},rcToInnerConfig:function(e){var t={};return Object.keys(e).forEach(function(n){var r=conversions.keyToCamelKey(n),i=e[n],s;s=!!definitions[n];if(s)try{i=definitions[n].convert(i)}catch(o){console.warn("Cannot convert config option %s: %s.",n,o.message||o)}t[r]=i}),t},printHelpAndExit:function(e){return e&&(console.log("Usage: node-inspector [options]"),console.log("     Option              Default                  Description"),Object.keys(definitions).map(function(e){definitions[e].desc&&console.log(definitions[e].desc)}),process.exit()),e},stringToArray:function(e){var t;if(typeof e=="string")try{e=JSON.parse(e)}catch(n){throw new Error("The value is not a valid JSON. "+(n.message||n))}if(e.length>=0)return t=e.map(function(e){return new RegExp(e,"i")}),t;var r="The value "+JSON.stringify(e)+" is not an array.";throw new Error(r)},stringToBoolean:function(e){return!!e},stringToInt:function(e){return parseInt(e,10)}},definitions={help:{desc:"--help               |             | Print information about options",convert:conversions.printHelpAndExit,defaultValue:!1},"web-port":{desc:"--web-port           |    8080     | Port to host the inspector",convert:conversions.stringToInt,defaultValue:8080},"web-host":{desc:"--web-host           |  127.0.0.1  | Host to listen on",convert:conversions.checkIfNull,defaultValue:null},"debug-port":{desc:"--debug-port         |    5858     | Port to connect to the debugging app",convert:conversions.stringToInt,defaultValue:5858},"save-live-edit":{desc:"--save-live-edit     |    false    | Save live edit changes to disk\n                     |             |   (update the edited files)",convert:conversions.stringToBoolean,defaultValue:!1},hidden:{desc:"--hidden             |     []      | Array of files to hide from the UI\n                     |             |   (breakpoints in these files will be ignored)",convert:conversions.stringToArray,defaultValue:[]},"stack-trace-limit":{desc:"--stack-trace-limit  |     50      | Number of stack frames to show on a breakpoint",convert:conversions.stringToInt,defaultValue:50}},defaults=loadDefaults(),rcConfig=rc("node-inspector",defaults),config=conversions.rcToInnerConfig(rcConfig);config.isScriptHidden=function(e){return config.hidden.some(function(n){return n.test(e)})},module.exports=config;