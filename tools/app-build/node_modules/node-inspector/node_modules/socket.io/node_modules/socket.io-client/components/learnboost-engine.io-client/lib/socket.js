function Socket(e){if(!(this instanceof Socket))return new Socket(e);if("string"==typeof e){var t=util.parseUri(e);e=arguments[1]||{},e.host=t.host,e.secure=t.protocol=="https"||t.protocol=="wss",e.port=t.port}e=e||{},this.secure=null!=e.secure?e.secure:global.location&&"https:"==location.protocol,this.host=e.host||e.hostname||(global.location?location.hostname:"localhost"),this.port=e.port||(global.location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},this.query.uid=rnd(),this.upgrade=!1!==e.upgrade,this.resource=e.resource||"default",this.path=(e.path||"/engine.io").replace(/\/$/,""),this.path+="/"+this.resource+"/",this.forceJSONP=!!e.forceJSONP,this.timestampParam=e.timestampParam||"t",this.timestampRequests=!!e.timestampRequests,this.flashPath=e.flashPath||"",this.transports=e.transports||["polling","websocket","flashsocket"],this.readyState="",this.writeBuffer=[],this.policyPort=e.policyPort||843,this.open(),Socket.sockets.push(this),Socket.sockets.evs.emit("add",this)}function clone(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function rnd(){return String(Math.random()).substr(5)+String(Math.random()).substr(5)}var util=require("./util"),transports=require("./transports"),Emitter=require("./emitter"),debug=require("debug")("engine-client:socket");module.exports=Socket;var global="undefined"!=typeof window?window:global;Emitter(Socket.prototype),Socket.protocol=1,Socket.sockets=[],Socket.sockets.evs=new Emitter,Socket.Socket=Socket,Socket.Transport=require("./transport"),Socket.Emitter=require("./emitter"),Socket.transports=require("./transports"),Socket.util=require("./util"),Socket.parser=require("./parser"),Socket.prototype.createTransport=function(e){debug('creating transport "%s"',e);var t=clone(this.query);t.transport=e,this.id&&(t.sid=this.id);var n=new transports[e]({host:this.host,port:this.port,secure:this.secure,path:this.path,query:t,forceJSONP:this.forceJSONP,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,flashPath:this.flashPath,policyPort:this.policyPort});return n},Socket.prototype.open=function(){this.readyState="opening";var e=this.createTransport(this.transports[0]);e.open(),this.setTransport(e)},Socket.prototype.setTransport=function(e){var t=this;this.transport&&(debug("clearing existing transport"),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.flush()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},Socket.prototype.probe=function(e){function i(i){if(n)return;n=!0;var s=new Error("probe error: "+i);s.transport=t.name,t.close(),t=null,debug('probe transport "%s" failed because of error: %s',e,i),r.emit("error",s)}debug('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;t.once("open",function(){if(n)return;debug('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(s){if(n)return;if("pong"==s.type&&"probe"==s.data)debug('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),debug('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){if(n)return;if("closed"==r.readyState||"closing"==r.readyState)return;debug("changing transport and sending upgrade packet"),t.removeListener("error",i),r.emit("upgrade",t),r.setTransport(t),t.send([{type:"upgrade"}]),t=null,r.upgrading=!1,r.flush()});else{debug('probe transport "%s" failed',e);var o=new Error("probe error");o.transport=t.name,r.emit("error",o)}})}),t.once("error",i),t.open(),this.once("close",function(){t&&(debug("socket closed prematurely - aborting probe"),n=!0,t.close(),t=null)}),this.once("upgrading",function(e){t&&e.name!=t.name&&(debug('"%s" works - aborting "%s"',e.name,t.name),t.close(),t=null)})},Socket.prototype.onOpen=function(){debug("socket open"),this.readyState="open",this.emit("open"),this.onopen&&this.onopen.call(this),this.flush();if("open"==this.readyState&&this.upgrade&&this.transport.pause){debug("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},Socket.prototype.onPacket=function(e){if("opening"==this.readyState||"open"==this.readyState){debug('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat");switch(e.type){case"open":this.onHandshake(util.parseJSON(e.data));break;case"pong":this.ping();break;case"error":var t=new Error("server error");t.code=e.data,this.emit("error",t);break;case"message":this.emit("message",e.data);var n={data:e.data};n.toString=function(){return e.data},this.onmessage&&this.onmessage.call(this,n)}}else debug('packet received with socket readyState "%s"',this.readyState)},Socket.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=e.upgrades,this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),this.ping(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat)},Socket.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){if("closed"==t.readyState)return;t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},Socket.prototype.ping=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){debug("writing ping packet - expecting pong within %sms",e.pingTimeout),e.sendPacket("ping"),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},Socket.prototype.flush=function(){"closed"!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(debug("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.writeBuffer=[])},Socket.prototype.write=Socket.prototype.send=function(e){return this.sendPacket("message",e),this},Socket.prototype.sendPacket=function(e,t){var n={type:e,data:t};this.emit("packetCreate",n),this.writeBuffer.push(n),this.flush()},Socket.prototype.close=function(){if("opening"==this.readyState||"open"==this.readyState)this.onClose("forced close"),debug("socket closing - telling transport to close"),this.transport.close(),this.transport.removeAllListeners();return this},Socket.prototype.onError=function(e){this.emit("error",e),this.onClose("transport error",e)},Socket.prototype.onClose=function(e,t){"closed"!=this.readyState&&(debug('socket close with reason: "%s"',e),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.readyState="closed",this.emit("close",e,t),this.onclose&&this.onclose.call(this),this.id=null)};