/*!
 * socket.io-node
 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

(function(e,t,n){if("object"==typeof global)return e.exports={"":function(){}};e.exports={"test connecting the socket and disconnecting":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){t.disconnect(),e()})},"test receiving messages":function(e){var t=create(),n=!1,r=0;t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){n=!0}),t.on("message",function(e){String(++r).should().equal(e)}),t.on("disconnect",function(t){n.should().be_true,r.should().equal(3),t.should().eql("booted"),e()})},"test sending messages":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){t.send("echo"),t.on("message",function(n){n.should().equal("echo"),t.disconnect(),e()})})},"test manual buffer flushing":function(e){var t=create();t.socket.options.manualFlush=!0,t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){t.socket.connected=!1,t.send("buffered"),t.socket.onConnect(),t.socket.flushBuffer(),t.on("message",function(n){n.should().equal("buffered"),t.disconnect(),e()})})},"test automatic buffer flushing":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){t.socket.connected=!1,t.send("buffered"),t.socket.onConnect(),t.on("message",function(n){n.should().equal("buffered"),t.disconnect(),e()})})},"test acks sent from client":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){t.on("message",function(n){"tobi 2"==n&&(t.disconnect(),e())})})},"test acks sent from server":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){t.send("ooo",function(){t.disconnect(),e()})})},"test connecting to namespaces":function(e){function s(){n.of("").disconnect(),i.should().equal(3),e()}var t=create(),n=t.socket,r=2,i=0;n.on("connect",function(){i++}),n.of("/woot").on("connect",function(){i++}).on("message",function(e){e.should().equal("connected to woot"),--r||s()}).on("error",function(e){throw new Error(e||"Received an error")}),n.of("/chat").on("connect",function(){i++}).on("message",function(e){e.should().equal("connected to chat"),--r||s()}).on("error",function(e){throw new Error(e||"Received an error")})},"test disconnecting from namespaces":function(e){function i(){t.of("").disconnect(),e()}var t=create().socket,n=2,r=0;t.of("/a").on("error",function(e){throw new Error(e||"Received an error")}),t.of("/a").on("connect",function(){t.of("/a").disconnect()}),t.of("/a").on("disconnect",function(){--n||i()}),t.of("/b").on("error",function(e){throw new Error(e||"Received an error")}),t.of("/b").on("connect",function(){t.of("/b").disconnect()}),t.of("/b").on("disconnect",function(){--n||i()})},"test authorizing for namespaces":function(e){function n(){t.of("").disconnect(),e()}var t=create().socket;t.of("/a").on("connect_failed",function(t){e()}).on("error",function(e){throw new Error(e||"Received an error")})},"test sending json from server":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("message",function(n){n.should().eql(3141592),t.disconnect(),e()})},"test sending json from client":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.json.send([1,2,3]),t.on("message",function(n){n.should().equal("echo"),t.disconnect(),e()})},"test emitting an event from server":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("woot",function(){t.disconnect(),e()})},"test emitting an event to server":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.emit("woot"),t.on("echo",function(){t.disconnect(),e()})},"test emitting multiple events at once to the server":function(e){var t=create();t.on("connect",function(){t.emit("print","foo"),t.emit("print","bar")}),t.on("done",function(){t.disconnect(),e()})},"test emitting an event from server and sending back data":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("woot",function(n,r){n.should().eql(1),r("test"),t.on("done",function(){t.disconnect(),e()})})},"test emitting an event to server and sending back data":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.emit("tobi",1,2,function(n){n.should().eql({hello:"world"}),t.disconnect(),e()})},"test encoding a payload":function(e){var t=create("/woot");t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("connect",function(){t.socket.setBuffer(!0),t.send("ñ"),t.send("ñ"),t.send("ñ"),t.send("ñ"),t.socket.setBuffer(!1)}),t.on("done",function(){t.disconnect(),e()})},"test sending query strings to the server":function(e){var t=create("?foo=bar");t.on("error",function(e){throw new Error(e||"Received an error")}),t.on("message",function(n){n.query.foo.should().eql("bar"),t.disconnect(),e()})},"test sending newline":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.send("\n"),t.on("done",function(){t.disconnect(),e()})},"test sending unicode":function(e){var t=create();t.on("error",function(e){throw new Error(e||"Received an error")}),t.json.send({test:"☃"}),t.on("done",function(){t.disconnect(),e()})},"test webworker connection":function(e){if(!window.Worker)return e();var t=new Worker("/test/worker.js");t.postMessage(uri()),t.onmessage=function(t){if("done!"==t.data)return e();throw new Error("Unexpected message: "+t.data)}}}})("undefined"==typeof module?module={}:module,"undefined"==typeof io?require("socket.io-client"):io,"undefined"==typeof should?require("should-browser"):should);