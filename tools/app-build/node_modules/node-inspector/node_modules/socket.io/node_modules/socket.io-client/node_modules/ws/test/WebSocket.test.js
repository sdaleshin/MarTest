function getArrayBuffer(e){var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n);for(var i=0;i<t;i++)r[i]=e[i];return r.buffer}function areArraysEqual(e,t){if(e.length!=t.length)return!1;for(var n=0,r=e.length;n<r;++n)if(e[n]!==t[n])return!1;return!0}var assert=require("assert"),https=require("https"),http=require("http"),should=require("should"),WebSocket=require("../"),WebSocketServer=require("../").Server,fs=require("fs"),server=require("./testserver"),crypto=require("crypto"),port=2e4;describe("WebSocket",function(){describe("#ctor",function(){it("throws exception for invalid url",function(e){try{var t=new WebSocket("echo.websocket.org")}catch(n){e()}})}),describe("options",function(){it("should accept an `agent` option",function(e){var t=new WebSocketServer({port:++port},function(){var n={addRequest:function(){t.close(),e()}},r=new WebSocket("ws://localhost:"+port,{agent:n})})}),it("should accept the `options` object as the 3rd argument",function(e){var t=new WebSocketServer({port:++port},function(){var n={addRequest:function(){t.close(),e()}},r=new WebSocket("ws://localhost:"+port,[],{agent:n})})})}),describe("properties",function(){it("#bytesReceived exposes number of bytes received",function(e){var t=new WebSocketServer({port:++port},function(){var n=new WebSocket("ws://localhost:"+port);n.on("message",function(){n.bytesReceived.should.eql(8),t.close(),e()})});t.on("connection",function(e){e.send("foobar")})}),it("#url exposes the server url",function(e){server.createServer(++port,function(t){var n="ws://localhost:"+port,r=new WebSocket(n);assert.equal(n,r.url),r.terminate(),r.on("close",function(){t.close(),e()})})}),it("#protocolVersion exposes the protocol version",function(e){server.createServer(++port,function(t){var n="ws://localhost:"+port,r=new WebSocket(n);assert.equal(13,r.protocolVersion),r.terminate(),r.on("close",function(){t.close(),e()})})}),describe("#bufferedAmount",function(){it("defaults to zero",function(e){server.createServer(++port,function(t){var n="ws://localhost:"+port,r=new WebSocket(n);assert.equal(0,r.bufferedAmount),r.terminate(),r.on("close",function(){t.close(),e()})})}),it('defaults to zero upon "open"',function(e){server.createServer(++port,function(t){var n="ws://localhost:"+port,r=new WebSocket(n);r.onopen=function(){assert.equal(0,r.bufferedAmount),r.terminate(),r.on("close",function(){t.close(),e()})}})}),it("stress kernel write buffer",function(e){var t=new WebSocketServer({port:++port},function(){var e=new WebSocket("ws://localhost:"+port)});t.on("connection",function(n){for(;;){if(n.bufferedAmount>0)break;n.send((new Array(1e4)).join("hello"))}n.terminate(),n.on("close",function(){t.close(),e()})})})}),describe("Custom headers",function(){it("request has an authorization header",function(e){var t="test:testpass",n=http.createServer(function(e,t){}),r=new WebSocketServer({server:n});n.listen(++port);var i=new WebSocket("ws://"+t+"@localhost:"+port);n.on("upgrade",function(s,o,u){assert(s.headers.authorization,"auth header exists"),assert.equal(s.headers.authorization,"Basic "+(new Buffer(t)).toString("base64")),i.terminate(),i.on("close",function(){n.close(),r.close(),e()})})}),it("accepts custom headers",function(e){var t=http.createServer(function(e,t){}),n=new WebSocketServer({server:t});t.listen(++port);var r=new WebSocket("ws://localhost:"+port,{headers:{Cookie:"foo=bar"}});t.on("upgrade",function(i,s,o){assert(i.headers.cookie,"auth header exists"),assert.equal(i.headers.cookie,"foo=bar"),r.terminate(),r.on("close",function(){t.close(),n.close(),e()})})})}),describe("#readyState",function(){it("defaults to connecting",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);assert.equal(WebSocket.CONNECTING,n.readyState),n.terminate(),n.on("close",function(){t.close(),e()})})}),it("set to open once connection is established",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){assert.equal(WebSocket.OPEN,n.readyState),t.close(),e()})})}),it("set to closed once connection is closed",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.close(1001),n.on("close",function(){assert.equal(WebSocket.CLOSED,n.readyState),t.close(),e()})})}),it("set to closed once connection is terminated",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.terminate(),n.on("close",function(){assert.equal(WebSocket.CLOSED,n.readyState),t.close(),e()})})})});var e={CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3};Object.keys(e).forEach(function(t){describe("."+t,function(){it("is enumerable property of class",function(){var n=Object.getOwnPropertyDescriptor(WebSocket,t);assert.equal(e[t],n.value),assert.equal(!0,n.enumerable)})})}),server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);Object.keys(e).forEach(function(t){describe("."+t,function(){it("is property of instance",function(){assert.equal(e[t],n[t])})})})})}),describe("events",function(){it("emits a ping event",function(e){var t=new WebSocketServer({port:++port});t.on("connection",function(e){e.ping()});var n=new WebSocket("ws://localhost:"+port);n.on("ping",function(){n.terminate(),t.close(),e()})}),it("emits a pong event",function(e){var t=new WebSocketServer({port:++port});t.on("connection",function(e){e.pong()});var n=new WebSocket("ws://localhost:"+port);n.on("pong",function(){n.terminate(),t.close(),e()})})}),describe("connection establishing",function(){it("can disconnect before connection is established",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.terminate(),n.on("open",function(){assert.fail("connect shouldnt be raised here")}),n.on("close",function(){t.close(),e()})})}),it("can close before connection is established",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.close(1001),n.on("open",function(){assert.fail("connect shouldnt be raised here")}),n.on("close",function(){t.close(),e()})})}),it("invalid server key is denied",function(e){server.createServer(++port,server.handlers.invalidKey,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){t.close(),e()})})}),it("close event is raised when server closes connection",function(e){server.createServer(++port,server.handlers.closeAfterConnect,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("close",function(){t.close(),e()})})}),it("error is emitted if server aborts connection",function(e){server.createServer(++port,server.handlers.return401,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){assert.fail("connect shouldnt be raised here")}),n.on("error",function(){t.close(),e()})})})}),describe("#pause and #resume",function(){it("pauses the underlying stream",function(e){function i(){if(++r==2){var i=!0;n.on("message",function(){i.should.not.be.ok,s.close(),e()}),n.pause(),setTimeout(function(){i=!1,n.resume()},200),t.send("foo")}}var t,n,r=0,s=new WebSocketServer({port:++port},function(){var e=new WebSocket("ws://localhost:"+port);n=e,n.on("open",i)});s.on("connection",function(e){t=e,i()})})}),describe("#ping",function(){it("before connect should fail",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){});try{n.ping()}catch(r){t.close(),n.terminate(),e()}})}),it("before connect can silently fail",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){}),n.ping("",{},!0),t.close(),n.terminate(),e()})}),it("without message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.ping()}),t.on("ping",function(r){t.close(),n.terminate(),e()})})}),it("with message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.ping("hi")}),t.on("ping",function(r){assert.equal("hi",r),t.close(),n.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.ping("hi",{mask:!0})}),t.on("ping",function(r,i){assert.ok(i.masked),assert.equal("hi",r),t.close(),n.terminate(),e()})})})}),describe("#pong",function(){it("before connect should fail",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){});try{n.pong()}catch(r){t.close(),n.terminate(),e()}})}),it("before connect can silently fail",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){}),n.pong("",{},!0),t.close(),n.terminate(),e()})}),it("without message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.pong()}),t.on("pong",function(r){t.close(),n.terminate(),e()})})}),it("with message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.pong("hi")}),t.on("pong",function(r){assert.equal("hi",r),t.close(),n.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.pong("hi",{mask:!0})}),t.on("pong",function(r,i){assert.ok(i.masked),assert.equal("hi",r),t.close(),n.terminate(),e()})})})}),describe("#send",function(){it("very long binary data can be sent and received (with echoing server)",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5242880);for(var i=0;i<r.length;++i)r[i]=i/5;n.on("open",function(){n.send(r,{binary:!0})}),n.on("message",function(i,s){assert.ok(s.binary),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(i)))),n.terminate(),t.close(),e()})})}),it("can send and receive text data",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.send("hi")}),n.on("message",function(r,i){assert.equal("hi",r),n.terminate(),t.close(),e()})})}),it("send and receive binary data as an array",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Float32Array(6);for(var i=0;i<r.length;++i)r[i]=i/2;var s=r.subarray(2,5);n.on("open",function(){n.send(s,{binary:!0})}),n.on("message",function(r,i){assert.ok(i.binary),assert.ok(areArraysEqual(s,new Float32Array(getArrayBuffer(r)))),n.terminate(),t.close(),e()})})}),it("binary data can be sent and received as buffer",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Buffer("foobar");n.on("open",function(){n.send(r,{binary:!0})}),n.on("message",function(i,s){assert.ok(s.binary),assert.ok(areArraysEqual(r,i)),n.terminate(),t.close(),e()})})}),it("ArrayBuffer is auto-detected without binary flag",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5);for(var i=0;i<r.length;++i)r[i]=i/2;n.on("open",function(){n.send(r.buffer)}),n.onmessage=function(i){assert.ok(i.type="Binary"),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(i.data)))),n.terminate(),t.close(),e()}})}),it("Buffer is auto-detected without binary flag",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Buffer("foobar");n.on("open",function(){n.send(r)}),n.onmessage=function(i){assert.ok(i.type="Binary"),assert.ok(areArraysEqual(i.data,r)),n.terminate(),t.close(),e()}})}),it("before connect should fail",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){});try{n.send("hi")}catch(r){n.terminate(),t.close(),e()}})}),it("before connect should pass error through callback, if present",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){}),n.send("hi",function(r){assert.ok(r instanceof Error),n.terminate(),t.close(),e()})})}),it("without data should be successful",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.send()}),t.on("message",function(r,i){assert.equal("",r),t.close(),n.terminate(),e()})})}),it("calls optional callback when flushed",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.send("hi",function(){t.close(),n.terminate(),e()})})})}),it("with unencoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.send("hi")}),t.on("message",function(r,i){assert.equal("hi",r),t.close(),n.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.send("hi",{mask:!0})}),t.on("message",function(r,i){assert.ok(i.masked),assert.equal("hi",r),t.close(),n.terminate(),e()})})}),it("with unencoded binary message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5);for(var i=0;i<r.length;++i)r[i]=i/2;n.on("open",function(){n.send(r,{binary:!0})}),t.on("message",function(i,s){assert.ok(s.binary),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(i)))),t.close(),n.terminate(),e()})})}),it("with encoded binary message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5);for(var i=0;i<r.length;++i)r[i]=i/2;n.on("open",function(){n.send(r,{mask:!0,binary:!0})}),t.on("message",function(i,s){assert.ok(s.binary),assert.ok(s.masked),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(i)))),t.close(),n.terminate(),e()})})}),it("with binary stream will send fragmented data",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=!1;n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.bufferSize=100,n.send(e,{binary:!0},function(e){assert.equal(null,e),r=!0})}),t.on("message",function(e,t){assert.ok(t.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile"),e)),n.terminate()}),n.on("close",function(){assert.ok(r),t.close(),e()})})}),it("with text stream will send fragmented data",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=!1;n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e,{binary:!1},function(e){assert.equal(null,e),r=!0})}),t.on("message",function(e,t){assert.ok(!t.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),e)),n.terminate()}),n.on("close",function(){assert.ok(r),t.close(),e()})})}),it("will cause intermittent send to be delayed in order",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e),n.send("foobar"),n.send("baz")});var r=0;t.on("message",function(i,s){++r,r==1?(assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),i))):r==2?(assert.ok(!s.binary),assert.equal("foobar",i)):(assert.ok(!s.binary),assert.equal("baz",i),t.close(),n.terminate(),e())})})}),it("will cause intermittent stream to be delayed in order",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e);var t=0;n.stream(function(e,n){assert.ok(!e),++t==1?n("foo"):n("bar",!0)})});var r=0;t.on("message",function(i,s){++r,r==1?(assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),i))):r==2&&(assert.ok(!s.binary),assert.equal("foobar",i),t.close(),n.terminate(),e())})})}),it("will cause intermittent ping to be delivered",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e),n.ping("foobar")});var r=0;t.on("message",function(i,s){assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),i)),++r==2&&(t.close(),n.terminate(),e())}),t.on("ping",function(i){assert.equal("foobar",i),++r==2&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent pong to be delivered",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e),n.pong("foobar")});var r=0;t.on("message",function(i,s){assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),i)),++r==2&&(t.close(),n.terminate(),e())}),t.on("pong",function(i){assert.equal("foobar",i),++r==2&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent close to be delivered",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e),n.close(1e3,"foobar")}),n.on("close",function(){t.close(),n.terminate(),e()}),n.on("error",function(){}),t.on("message",function(e,t){assert.ok(!t.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),e))}),t.on("close",function(e,t){assert.equal(1e3,e),assert.equal("foobar",t)})})})}),describe("#stream",function(){it("very long binary data can be streamed",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=new Buffer(10240);for(var i=0;i<r.length;++i)r[i]=i%255;n.on("open",function(){var e=0,t=800,i=r.length;n.stream({binary:!0},function(n,s){assert.ok(!n);var o=e*t,u=Math.min(t,i-e*t),a=o+u,f=u<t;s(r.slice(o,a),f),e+=1})}),t.on("message",function(i,s){assert.ok(s.binary),assert.ok(areArraysEqual(r,i)),n.terminate(),t.close(),e()})})}),it("before connect should pass error through callback",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("error",function(){}),n.stream(function(r){assert.ok(r instanceof Error),n.terminate(),t.close(),e()})})}),it("without callback should fail",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){try{n.stream()}catch(r){t.close(),n.terminate(),e()}})})}),it("will cause intermittent send to be delayed in order",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,i){assert.ok(!t),++e==1?(i(r.substr(0,5)),n.send("foobar"),n.send("baz")):i(r.substr(5,5),!0)})});var i=0;t.on("message",function(s,o){++i,i==1?(assert.ok(!o.binary),assert.equal(r,s)):i==2?(assert.ok(!o.binary),assert.equal("foobar",s)):(assert.ok(!o.binary),assert.equal("baz",s),t.close(),n.terminate(),e())})})}),it("will cause intermittent stream to be delayed in order",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,i){assert.ok(!t);if(++e==1){i(r.substr(0,5));var s=0;n.stream(function(e,t){assert.ok(!e),++s==1?t("foo"):t("bar",!0)}),n.send("baz")}else i(r.substr(5,5),!0)})});var i=0;t.on("message",function(s,o){++i;if(i==1)assert.ok(!o.binary),assert.equal(r,s);else if(i==2)assert.ok(!o.binary),assert.equal("foobar",s);else{if(i!=3)throw new Error("more messages than we actually sent just arrived");assert.ok(!o.binary),assert.equal("baz",s),setTimeout(function(){t.close(),n.terminate(),e()},1e3)}})})}),it("will cause intermittent ping to be delivered",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,i){assert.ok(!t),++e==1?(i(r.substr(0,5)),n.ping("foobar")):i(r.substr(5,5),!0)})});var i=0;t.on("message",function(s,o){assert.ok(!o.binary),assert.equal(r,s),++i==2&&(t.close(),n.terminate(),e())}),t.on("ping",function(r){assert.equal("foobar",r),++i==2&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent pong to be delivered",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,i){assert.ok(!t),++e==1?(i(r.substr(0,5)),n.pong("foobar")):i(r.substr(5,5),!0)})});var i=0;t.on("message",function(s,o){assert.ok(!o.binary),assert.equal(r,s),++i==2&&(t.close(),n.terminate(),e())}),t.on("pong",function(r){assert.equal("foobar",r),++i==2&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent close to be delivered",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r="HelloWorld",i=!1;n.on("open",function(){var e=0;n.stream(function(t,s){++e==1?(s(r.substr(0,5)),n.close(1e3,"foobar")):e==2?s(r.substr(5,5),!0):e==3&&(assert.ok(t),i=!0)})}),n.on("close",function(){assert.ok(i),t.close(),n.terminate(),e()}),t.on("message",function(e,t){assert.ok(!t.binary),assert.equal(r,e)}),t.on("close",function(e,t){assert.equal(1e3,e),assert.equal("foobar",t)})})})}),describe("#close",function(){it("will raise error callback, if any, if called during send stream",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=!1;n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e,function(e){r=e!=null}),n.close(1e3,"foobar")}),n.on("close",function(){setTimeout(function(){assert.ok(r),t.close(),n.terminate(),e()},1e3)})})}),it("without invalid first argument throws exception",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){try{n.close("error")}catch(r){t.close(),n.terminate(),e()}})})}),it("without reserved error code 1004 throws exception",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){try{n.close(1004)}catch(r){t.close(),n.terminate(),e()}})})}),it("without message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.close(1e3)}),t.on("close",function(r,i,s){assert.equal("",i),t.close(),n.terminate(),e()})})}),it("with message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.close(1e3,"some reason")}),t.on("close",function(r,i,s){assert.ok(s.masked),assert.equal("some reason",i),t.close(),n.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.on("open",function(){n.close(1e3,"some reason",{mask:!0})}),t.on("close",function(r,i,s){assert.ok(s.masked),assert.equal("some reason",i),t.close(),n.terminate(),e()})})}),it("ends connection to the server",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=!1;n.on("open",function(){r=!0,n.close(1e3,"some reason",{mask:!0})}),n.on("close",function(){assert.ok(r),t.close(),n.terminate(),e()})})})}),describe("W3C API emulation",function(){it("should not throw errors when getting and setting",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=function(){};n.onmessage=r,n.onerror=r,n.onclose=r,n.onopen=r,assert.ok(n.onopen===r),assert.ok(n.onmessage===r),assert.ok(n.onclose===r),assert.ok(n.onerror===r),t.close(),n.terminate(),e()})}),it("should work the same as the EventEmitter api",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port),r=function(){},i=0,s=0,o=0;n.onmessage=function(e){assert.ok(!!e.data),++i,n.close()},n.onopen=function(){++o},n.onclose=function(){++s},n.on("open",function(){n.send("foo")}),n.on("close",function(){process.nextTick(function(){assert.ok(i===1),assert.ok(o===1),assert.ok(s===1),t.close(),n.terminate(),e()})})})}),it("should receive text data wrapped in a MessageEvent when using addEventListener",function(e){server.createServer(++port,function(t){var n=new WebSocket("ws://localhost:"+port);n.addEventListener("open",function(){n.send("hi")}),n.addEventListener("message",function(r){assert.equal("hi",r.data),n.terminate(),t.close(),e()})})}),it("should receive valid CloseEvent when server closes with code 1000",function(e){var t=new WebSocketServer({port:++port},function(){var n=new WebSocket("ws://localhost:"+port);n.addEventListener("close",function(r){assert.equal(!0,r.wasClean),assert.equal(1e3,r.code),n.terminate(),t.close(),e()})});t.on("connection",function(e){e.close(1e3)})}),it("should receive valid CloseEvent when server closes with code 1001",function(e){var t=new WebSocketServer({port:++port},function(){var n=new WebSocket("ws://localhost:"+port);n.addEventListener("close",function(r){assert.equal(!1,r.wasClean),assert.equal(1001,r.code),assert.equal("some daft reason",r.reason),n.terminate(),t.close(),e()})});t.on("connection",function(e){e.close(1001,"some daft reason")})}),it("should have target set on Events",function(e){var t=new WebSocketServer({port:++port},function(){var n=new WebSocket("ws://localhost:"+port);n.addEventListener("open",function(e){assert.equal(n,e.target)}),n.addEventListener("message",function(e){assert.equal(n,e.target),t.close()}),n.addEventListener("close",function(e){assert.equal(n,e.target),n.emit("error",new Error("forced"))}),n.addEventListener("error",function(t){assert.equal(t.message,"forced"),assert.equal(n,t.target),n.terminate(),e()})});t.on("connection",function(e){e.send("hi")})})}),describe("ssl",function(){it("can connect to secure websocket server",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},n=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),r=new WebSocketServer({server:n});n.listen(++port,function(){var e=new WebSocket("wss://localhost:"+port)}),r.on("connection",function(t){n.close(),t.terminate(),r.close(),e()})}),it("can connect to secure websocket server with client side certificate",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem"),ca:[fs.readFileSync("test/fixtures/ca1-cert.pem")],requestCert:!0},n={key:fs.readFileSync("test/fixtures/agent1-key.pem"),cert:fs.readFileSync("test/fixtures/agent1-cert.pem")},r=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),i=!1,s=new WebSocketServer({server:r,verifyClient:function(e){return i=!!e.req.client.authorized,!0}});r.listen(++port,function(){var e=new WebSocket("wss://localhost:"+port,n)}),s.on("connection",function(t){r.close(),t.terminate(),s.close(),i.should.be.ok,e()})}),it("cannot connect to secure websocket server via ws://",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},n=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),r=new WebSocketServer({server:n});n.listen(++port,function(){var t=new WebSocket("ws://localhost:"+port,{rejectUnauthorized:!1});t.on("error",function(){n.close(),t.terminate(),r.close(),e()})})}),it("can send and receive text data",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},n=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),r=new WebSocketServer({server:n});n.listen(++port,function(){var e=new WebSocket("wss://localhost:"+port);e.on("open",function(){e.send("foobar")})}),r.on("connection",function(t){t.on("message",function(i,s){i.should.eql("foobar"),n.close(),t.terminate(),r.close(),e()})})}),it("can send and receive very long binary data",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},n=https.createServer(t,function(e,t){t.writeHead(200),t.end()});crypto.randomBytes(5242880,function(t,r){if(t)throw t;var i=new WebSocketServer({server:n});n.listen(++port,function(){var t=new WebSocket("wss://localhost:"+port);t.on("open",function(){t.send(r,{binary:!0})}),t.on("message",function(s,o){o.binary.should.be.ok,areArraysEqual(r,s).should.be.ok,n.close(),t.terminate(),i.close(),e()})}),i.on("connection",function(e){e.on("message",function(t,n){e.send(t,{binary:!0})})})})})}),describe("protocol support discovery",function(){describe("#supports",function(){describe("#binary",function(){it("returns true for hybi transport",function(e){var t=new WebSocketServer({port:++port},function(){var e=new WebSocket("ws://localhost:"+port)});t.on("connection",function(n){assert.equal(!0,n.supports.binary),t.close(),e()})}),it("returns false for hixie transport",function(e){var t=new WebSocketServer({port:++port},function(){var e={port:port,host:"127.0.0.1",headers:{Connection:"Upgrade",Upgrade:"WebSocket","Sec-WebSocket-Key1":"3e6b263  4 17 80","Sec-WebSocket-Key2":"17  9 G`ZD9   2 2b 7X 3 /r90"}},t=http.request(e);t.write("WjN}|M(6"),t.end()});t.on("connection",function(n){assert.equal(!1,n.supports.binary),t.close(),e()})})})})}),describe("host and origin headers",function(){it("includes the host header with port number",function(e){var t=http.createServer();t.listen(++port,function(){t.on("upgrade",function(n,r,i){assert.equal("localhost:"+port,n.headers.host),t.close(),e()});var n=new WebSocket("ws://localhost:"+port)})}),it("includes the origin header with port number",function(e){var t=http.createServer();t.listen(++port,function(){t.on("upgrade",function(n,r,i){assert.equal("localhost:"+port,n.headers.origin),t.close(),e()});var n=new WebSocket("ws://localhost:"+port)})})})});