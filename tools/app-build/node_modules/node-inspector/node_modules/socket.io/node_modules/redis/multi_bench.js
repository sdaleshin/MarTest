function lpad(e,t,n){var r=e.toString();n=n||" ";while(r.length<t)r=n+r;return r}function Test(e){var t=this;this.args=e,this.callback=null,this.clients=[],this.clients_ready=0,this.commands_sent=0,this.commands_completed=0,this.max_pipeline=this.args.pipeline||num_requests,this.client_options=e.client_options||client_options,this.connect_latency=new metrics.Histogram,this.ready_latency=new metrics.Histogram,this.command_latency=new metrics.Histogram}function next(){var e=tests.shift();e?e.run(function(){next()}):(console.log("End of tests."),process.exit(0))}var redis=require("./index"),metrics=require("metrics"),num_clients=parseInt(process.argv[2],10)||5,num_requests=2e4,tests=[],versions_logged=!1,client_options={return_buffers:!1},small_str,large_str,small_buf,large_buf;redis.debug_mode=!1,metrics.Histogram.prototype.print_line=function(){var e=this.printObj();return lpad(e.min,4)+"/"+lpad(e.max,4)+"/"+lpad(e.mean.toFixed(2),7)+"/"+lpad(e.p95.toFixed(2),7)},Test.prototype.run=function(e){var t=this,n;this.callback=e;for(n=0;n<num_clients;n++)this.new_client(n)},Test.prototype.new_client=function(e){var t=this,n;n=redis.createClient(6379,"127.0.0.1",this.client_options),n.create_time=Date.now(),n.on("connect",function(){t.connect_latency.update(Date.now()-n.create_time)}),n.on("ready",function(){versions_logged||(console.log("Client count: "+num_clients+", node version: "+process.versions.node+", server version: "+n.server_info.redis_version+", parser: "+n.reply_parser.name),versions_logged=!0),t.ready_latency.update(Date.now()-n.create_time),t.clients_ready++,t.clients_ready===t.clients.length&&t.on_clients_ready()}),t.clients[e]=n},Test.prototype.on_clients_ready=function(){process.stdout.write(lpad(this.args.descr,13)+", "+lpad(this.args.pipeline,5)+"/"+this.clients_ready+" "),this.test_start=Date.now(),this.fill_pipeline()},Test.prototype.fill_pipeline=function(){var e=this.commands_sent-this.commands_completed;while(this.commands_sent<num_requests&&e<this.max_pipeline)this.commands_sent++,e++,this.send_next();this.commands_completed===num_requests&&(this.print_stats(),this.stop_clients())},Test.prototype.stop_clients=function(){var e=this;this.clients.forEach(function(t,n){n===e.clients.length-1?t.quit(function(t,n){e.callback()}):t.quit()})},Test.prototype.send_next=function(){var e=this,t=this.commands_sent%this.clients.length,n=this.commands_sent,r=Date.now();this.clients[t][this.args.command](this.args.args,function(t,n){if(t)throw t;e.commands_completed++,e.command_latency.update(Date.now()-r),e.fill_pipeline()})},Test.prototype.print_stats=function(){var e=Date.now()-this.test_start;console.log("min/max/avg/p95: "+this.command_latency.print_line()+" "+lpad(e,6)+"ms total, "+lpad((num_requests/(e/1e3)).toFixed(2),8)+" ops/sec")},small_str="1234",small_buf=new Buffer(small_str),large_str=(new Array(4097)).join("-"),large_buf=new Buffer(large_str),tests.push(new Test({descr:"PING",command:"ping",args:[],pipeline:1})),tests.push(new Test({descr:"PING",command:"ping",args:[],pipeline:50})),tests.push(new Test({descr:"PING",command:"ping",args:[],pipeline:200})),tests.push(new Test({descr:"PING",command:"ping",args:[],pipeline:2e4})),tests.push(new Test({descr:"SET small str",command:"set",args:["foo_rand000000000000",small_str],pipeline:1})),tests.push(new Test({descr:"SET small str",command:"set",args:["foo_rand000000000000",small_str],pipeline:50})),tests.push(new Test({descr:"SET small str",command:"set",args:["foo_rand000000000000",small_str],pipeline:200})),tests.push(new Test({descr:"SET small str",command:"set",args:["foo_rand000000000000",small_str],pipeline:2e4})),tests.push(new Test({descr:"SET small buf",command:"set",args:["foo_rand000000000000",small_buf],pipeline:1})),tests.push(new Test({descr:"SET small buf",command:"set",args:["foo_rand000000000000",small_buf],pipeline:50})),tests.push(new Test({descr:"SET small buf",command:"set",args:["foo_rand000000000000",small_buf],pipeline:200})),tests.push(new Test({descr:"SET small buf",command:"set",args:["foo_rand000000000000",small_buf],pipeline:2e4})),tests.push(new Test({descr:"GET small str",command:"get",args:["foo_rand000000000000"],pipeline:1})),tests.push(new Test({descr:"GET small str",command:"get",args:["foo_rand000000000000"],pipeline:50})),tests.push(new Test({descr:"GET small str",command:"get",args:["foo_rand000000000000"],pipeline:200})),tests.push(new Test({descr:"GET small str",command:"get",args:["foo_rand000000000000"],pipeline:2e4})),tests.push(new Test({descr:"GET small buf",command:"get",args:["foo_rand000000000000"],pipeline:1,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"GET small buf",command:"get",args:["foo_rand000000000000"],pipeline:50,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"GET small buf",command:"get",args:["foo_rand000000000000"],pipeline:200,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"GET small buf",command:"get",args:["foo_rand000000000000"],pipeline:2e4,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"SET large str",command:"set",args:["foo_rand000000000001",large_str],pipeline:1})),tests.push(new Test({descr:"SET large str",command:"set",args:["foo_rand000000000001",large_str],pipeline:50})),tests.push(new Test({descr:"SET large str",command:"set",args:["foo_rand000000000001",large_str],pipeline:200})),tests.push(new Test({descr:"SET large str",command:"set",args:["foo_rand000000000001",large_str],pipeline:2e4})),tests.push(new Test({descr:"SET large buf",command:"set",args:["foo_rand000000000001",large_buf],pipeline:1})),tests.push(new Test({descr:"SET large buf",command:"set",args:["foo_rand000000000001",large_buf],pipeline:50})),tests.push(new Test({descr:"SET large buf",command:"set",args:["foo_rand000000000001",large_buf],pipeline:200})),tests.push(new Test({descr:"SET large buf",command:"set",args:["foo_rand000000000001",large_buf],pipeline:2e4})),tests.push(new Test({descr:"GET large str",command:"get",args:["foo_rand000000000001"],pipeline:1})),tests.push(new Test({descr:"GET large str",command:"get",args:["foo_rand000000000001"],pipeline:50})),tests.push(new Test({descr:"GET large str",command:"get",args:["foo_rand000000000001"],pipeline:200})),tests.push(new Test({descr:"GET large str",command:"get",args:["foo_rand000000000001"],pipeline:2e4})),tests.push(new Test({descr:"GET large buf",command:"get",args:["foo_rand000000000001"],pipeline:1,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"GET large buf",command:"get",args:["foo_rand000000000001"],pipeline:50,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"GET large buf",command:"get",args:["foo_rand000000000001"],pipeline:200,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"GET large buf",command:"get",args:["foo_rand000000000001"],pipeline:2e4,client_opts:{return_buffers:!0}})),tests.push(new Test({descr:"INCR",command:"incr",args:["counter_rand000000000000"],pipeline:1})),tests.push(new Test({descr:"INCR",command:"incr",args:["counter_rand000000000000"],pipeline:50})),tests.push(new Test({descr:"INCR",command:"incr",args:["counter_rand000000000000"],pipeline:200})),tests.push(new Test({descr:"INCR",command:"incr",args:["counter_rand000000000000"],pipeline:2e4})),tests.push(new Test({descr:"LPUSH",command:"lpush",args:["mylist",small_str],pipeline:1})),tests.push(new Test({descr:"LPUSH",command:"lpush",args:["mylist",small_str],pipeline:50})),tests.push(new Test({descr:"LPUSH",command:"lpush",args:["mylist",small_str],pipeline:200})),tests.push(new Test({descr:"LPUSH",command:"lpush",args:["mylist",small_str],pipeline:2e4})),tests.push(new Test({descr:"LRANGE 10",command:"lrange",args:["mylist","0","9"],pipeline:1})),tests.push(new Test({descr:"LRANGE 10",command:"lrange",args:["mylist","0","9"],pipeline:50})),tests.push(new Test({descr:"LRANGE 10",command:"lrange",args:["mylist","0","9"],pipeline:200})),tests.push(new Test({descr:"LRANGE 10",command:"lrange",args:["mylist","0","9"],pipeline:2e4})),tests.push(new Test({descr:"LRANGE 100",command:"lrange",args:["mylist","0","99"],pipeline:1})),tests.push(new Test({descr:"LRANGE 100",command:"lrange",args:["mylist","0","99"],pipeline:50})),tests.push(new Test({descr:"LRANGE 100",command:"lrange",args:["mylist","0","99"],pipeline:200})),tests.push(new Test({descr:"LRANGE 100",command:"lrange",args:["mylist","0","99"],pipeline:2e4})),next();