function assertProperties(e,t){assert.lengthOf(e,t.length+1),t.forEach(function(t){assert.isTrue(!!~e.indexOf(t))})}function testExposes(e){return{topic:function(){exec("node "+path.join(__dirname,"..","examples",e.script),this.callback)},"should expose that property correctly":function(t,n,r){assert.isNull(t);var i=r.match(/'(\w+)'/ig).map(function(e){return e.substring(1,e.length-1)});return e.assert?e.assert(i):assertProperties(i,e.properties)}}}var assert=require("assert"),exec=require("child_process").exec,fs=require("fs"),path=require("path"),vows=require("vows"),pkginfo=require("../lib/pkginfo");vows.describe("pkginfo").addBatch({"When using the pkginfo module":{"and passed a single `string` argument":testExposes({script:"single-property.js",properties:["version"]}),"and passed multiple `string` arguments":testExposes({script:"multiple-properties.js",properties:["version","author"]}),"and passed an `object` argument":testExposes({script:"object-argument.js",properties:["version","author"]}),"and passed an `array` argument":testExposes({script:"array-argument.js",properties:["version","author"]}),"and passed no arguments":testExposes({script:"all-properties.js",assert:function(e){var t=fs.readFileSync(path.join(__dirname,"..","examples","package.json")).toString(),n=Object.keys(JSON.parse(t));assertProperties(e,n)}})}}).export(module);