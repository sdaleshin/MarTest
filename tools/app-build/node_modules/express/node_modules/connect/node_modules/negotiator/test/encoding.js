(function(){var e,t,n,r,i,s,o=this;t=require("../lib/encoding").preferredEncodings,this["Should return identity encoding when no encoding is provided"]=function(e){return e.deepEqual(t(null),["identity"]),e.done()},this["Should include the identity encoding even if not explicity listed"]=function(e){return e.ok(t("gzip").indexOf("identity")!==-1),e.done()},this["Should not return identity encoding if q = 0"]=function(e){return e.ok(t("identity;q=0").indexOf("identity")===-1),e.done()},r=function(e){return o["Should return "+e.selected+" for accept-encoding header "+e.accept+" with provided encoding "+e.provided]=function(n){return n.deepEqual(t(e.accept,e.provided),e.selected),n.done()}},n=[{accept:"gzip",provided:["identity","gzip"],selected:["gzip","identity"]},{accept:"gzip, compress",provided:["compress"],selected:["compress"]},{accept:"deflate",provided:["gzip","identity"],selected:["identity"]},{accept:"*",provided:["identity","gzip"],selected:["identity","gzip"]},{accept:"gzip, compress",provided:["compress","identity"],selected:["compress","identity"]},{accept:"gzip;q=0.8, identity;q=0.5, *;q=0.3",provided:["identity","gzip","compress"],selected:["gzip","identity","compress"]},{accept:"gzip;q=0.8, compress",provided:["gzip","compress"],selected:["compress","gzip"]},{accept:"gzip;q=0.8, compress",provided:null,selected:["compress","gzip","identity"]}];for(i=0,s=n.length;i<s;i++)e=n[i],r(e)}).call(this);