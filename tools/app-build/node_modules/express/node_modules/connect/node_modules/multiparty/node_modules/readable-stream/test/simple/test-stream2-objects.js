// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function test(e,t){count++,tests.push([e,t])}function run(){var e=tests.shift();if(!e)return console.error("ok");var t=e[0],n=e[1];console.log("# %s",t),n({same:assert.deepEqual,equal:assert.equal,end:function(){count--,run()}})}function toArray(e){var t=new Writable({objectMode:!0}),n=[];return t.write=function(e){n.push(e)},t.end=function(){e(n)},t}function fromArray(e){var t=new Readable({objectMode:!0});return t._read=noop,e.forEach(function(e){t.push(e)}),t.push(null),t}function noop(){}var common=require("../common.js"),Readable=require("../../lib/_stream_readable"),Writable=require("../../lib/_stream_writable"),assert=require("assert"),tests=[],count=0;process.on("exit",function(){assert.equal(count,0)}),process.nextTick(run),test("can read objects from stream",function(e){var t=fromArray([{one:"1"},{two:"2"}]),n=t.read(),r=t.read(),i=t.read();assert.deepEqual(n,{one:"1"}),assert.deepEqual(r,{two:"2"}),assert.deepEqual(i,null),e.end()}),test("can pipe objects into stream",function(e){var t=fromArray([{one:"1"},{two:"2"}]);t.pipe(toArray(function(t){assert.deepEqual(t,[{one:"1"},{two:"2"}]),e.end()}))}),test("read(n) is ignored",function(e){var t=fromArray([{one:"1"},{two:"2"}]),n=t.read(2);assert.deepEqual(n,{one:"1"}),e.end()}),test("can read objects from _read (sync)",function(e){var t=new Readable({objectMode:!0}),n=[{one:"1"},{two:"2"}];t._read=function(e){var i=n.shift();t.push(i||null)},t.pipe(toArray(function(t){assert.deepEqual(t,[{one:"1"},{two:"2"}]),e.end()}))}),test("can read objects from _read (async)",function(e){var t=new Readable({objectMode:!0}),n=[{one:"1"},{two:"2"}];t._read=function(e){var i=n.shift();process.nextTick(function(){t.push(i||null)})},t.pipe(toArray(function(t){assert.deepEqual(t,[{one:"1"},{two:"2"}]),e.end()}))}),test("can read strings as objects",function(e){var t=new Readable({objectMode:!0});t._read=noop;var n=["one","two","three"];n.forEach(function(e){t.push(e)}),t.push(null),t.pipe(toArray(function(t){assert.deepEqual(t,n),e.end()}))}),test("read(0) for object streams",function(e){var t=new Readable({objectMode:!0});t._read=noop,t.push("foobar"),t.push(null);var n=t.read(0);t.pipe(toArray(function(t){assert.deepEqual(t,["foobar"]),e.end()}))}),test("falsey values",function(e){var t=new Readable({objectMode:!0});t._read=noop,t.push(!1),t.push(0),t.push(""),t.push(null),t.pipe(toArray(function(t){assert.deepEqual(t,[!1,0,""]),e.end()}))}),test("high watermark _read",function(e){var t=new Readable({highWaterMark:6,objectMode:!0}),n=0,r=["1","2","3","4","5","6","7","8"];t._read=function(e){n++},r.forEach(function(e){t.push(e)});var i=t.read();assert.equal(n,0),assert.equal(i,"1");var s=t.read();assert.equal(s,"2");var o=t.read();assert.equal(o,"3"),assert.equal(n,1),e.end()}),test("high watermark push",function(e){var t=new Readable({highWaterMark:6,objectMode:!0});t._read=function(e){};for(var n=0;n<6;n++){var r=t.push(n);assert.equal(r,n===5?!1:!0)}e.end()}),test("can write objects to stream",function(e){var t=new Writable({objectMode:!0});t._write=function(e,t,n){assert.deepEqual(e,{foo:"bar"}),n()},t.on("finish",function(){e.end()}),t.write({foo:"bar"}),t.end()}),test("can write multiple objects to stream",function(e){var t=new Writable({objectMode:!0}),n=[];t._write=function(e,t,r){n.push(e),r()},t.on("finish",function(){assert.deepEqual(n,[0,1,2,3,4]),e.end()}),t.write(0),t.write(1),t.write(2),t.write(3),t.write(4),t.end()}),test("can write strings as objects",function(e){var t=new Writable({objectMode:!0}),n=[];t._write=function(e,t,r){n.push(e),process.nextTick(r)},t.on("finish",function(){assert.deepEqual(n,["0","1","2","3","4"]),e.end()}),t.write("0"),t.write("1"),t.write("2"),t.write("3"),t.write("4"),t.end()}),test("buffers finish until cb is called",function(e){var t=new Writable({objectMode:!0}),n=!1;t._write=function(e,t,r){assert.equal(e,"foo"),process.nextTick(function(){n=!0,r()})},t.on("finish",function(){assert.equal(n,!0),e.end()}),t.write("foo"),t.end()});