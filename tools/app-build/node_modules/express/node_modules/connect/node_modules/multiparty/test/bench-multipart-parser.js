function createMultipartBuffer(e,t){var n="--"+e+"\r\n"+'content-disposition: form-data; name="field1"\r\n'+"\r\n",r="\r\n--"+e+"--\r\n",i=new Buffer(t);return i.write(n,"ascii",0),i.write(r,"ascii",i.length-r.length),i}function hijack(e,t){var n=form[e];form[e]=function(){return t(),n.apply(this,arguments)}}var assert=require("assert"),Form=require("../").Form,boundary="-----------------------------168072824752491622650073",mb=100,buffer=createMultipartBuffer(boundary,mb*1024*1024),callbacks={partBegin:-1,partEnd:-1,headerField:-1,headerValue:-1,partData:-1,end:-1},form=new Form({boundary:boundary});hijack("onParseHeaderField",function(){callbacks.headerField++}),hijack("onParseHeaderValue",function(){callbacks.headerValue++}),hijack("onParsePartBegin",function(){callbacks.partBegin++}),hijack("onParsePartData",function(){callbacks.partData++}),hijack("onParsePartEnd",function(){callbacks.partEnd++}),form.on("finish",function(){callbacks.end++});var start=new Date;form.write(buffer,function(e){var t=new Date-start;assert.ifError(e);var n=(mb/(t/1e3)).toFixed(2);console.log(n+" mb/sec")}),process.on("exit",function(){for(var e in callbacks)assert.equal(0,callbacks[e],e+" count off by "+callbacks[e])});