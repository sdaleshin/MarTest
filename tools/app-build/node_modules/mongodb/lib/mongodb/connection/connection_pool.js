var utils=require("./connection_utils"),inherits=require("util").inherits,net=require("net"),timers=require("timers"),EventEmitter=require("events").EventEmitter,inherits=require("util").inherits,MongoReply=require("../responses/mongo_reply").MongoReply,Connection=require("./connection").Connection,processor=require("../utils").processor(),ConnectionPool=exports.ConnectionPool=function(e,t,n,r,i){if(typeof e!="string")throw new Error("host must be specified ["+e+"]");EventEmitter.call(this),this.socketOptions=typeof i=="object"?i:{},this.socketOptions.host=e,this.socketOptions.port=t,this.socketOptions.domainSocket=!1,this.bson=r,this.poolSize=n,this.minPoolSize=Math.floor(this.poolSize/2)+1;if(e.match(/^\//))this.socketOptions.domainSocket=!0;else if(typeof t=="string")try{t=parseInt(t,10)}catch(s){new Error("port must be specified or valid integer["+t+"]")}else if(typeof t!="number")throw new Error("port must be specified ["+t+"]");utils.setIntegerParameter(this.socketOptions,"timeout",0),utils.setBooleanParameter(this.socketOptions,"noDelay",!0),utils.setIntegerParameter(this.socketOptions,"keepAlive",0),utils.setStringParameter(this.socketOptions,"encoding",null),utils.setIntegerParameter(this.socketOptions,"bufferSize",0),this.openConnections=[],this.connectionId=0,this.currentConnectionIndex=0,this._poolState="disconnected",this._timeout=!1,this._timeToWait=10};inherits(ConnectionPool,EventEmitter),ConnectionPool.prototype.setMaxBsonSize=function(e){e==null&&(e=Connection.DEFAULT_MAX_BSON_SIZE);for(var t=0;t<this.openConnections.length;t++)this.openConnections[t].maxBsonSize=e,this.openConnections[t].maxBsonSettings.maxBsonSize=e},ConnectionPool.prototype.setMaxMessageSizeBytes=function(e){e==null&&(e=Connection.DEFAULT_MAX_MESSAGE_SIZE);for(var t=0;t<this.openConnections.length;t++)this.openConnections[t].maxMessageSizeBytes=e,this.openConnections[t].maxBsonSettings.maxMessageSizeBytes=e};var _connect=function(e){var t=new Connection(e.connectionId++,e.socketOptions);t.logger=e.logger,t.on("connect",function(t,n){e.openConnections.push(n),e.openConnections.length===e.poolSize&&e._poolState!=="disconnected"?(e._poolState="connected",e.emit("poolReady")):e.openConnections.length<e.poolSize&&(typeof e._timeToWait=="number"?setTimeout(function(){e._poolState=="connecting"&&_connect(e)},e._timeToWait):processor(function(){e._poolState=="connecting"&&_connect(e)}))});var n=0;t.on("error",function(t,r,i){n++,e._poolState!="disconnected"&&e.listeners("error").length>0&&e.emit("error",t,r,i),r.close(),e._poolState="disconnected",e.stop()}),t.on("close",function(){e._poolState!=="disconnected"&&e.listeners("close").length>0&&e.emit("close"),e._poolState="disconnected",e.stop()}),t.on("timeout",function(t,n){e._poolState!=="disconnected"&&e.listeners("timeout").length>0&&e.emit("timeout",t),n.close(),e._poolState="disconnected",e.stop()}),t.on("parseError",function(){e._poolState!=="disconnected"&&e.listeners("parseError").length>0&&e.emit("parseError",new Error("parseError occured")),e._poolState="disconnected",e.stop()}),t.on("message",function(t){e.emit("message",t)}),t.start()};ConnectionPool.prototype.start=function(){var e=(new Date).getTime(),t=this;if(this.listeners("poolReady").length==0)throw"pool must have at least one listener ready that responds to the [poolReady] event";this._poolState="connecting",this._timeout=!1,_connect(t)},ConnectionPool.prototype.restart=function(){this.stop(!1),this.start()},ConnectionPool.prototype.stop=function(e){e=e==null?!0:e,this._poolState="disconnected",e&&this.removeAllEventListeners();for(var t=0;t<this.openConnections.length;t++)this.openConnections[t].close();this.openConnections=[]},ConnectionPool.prototype.isConnected=function(){return this.openConnections.length>0&&this.openConnections[0].isConnected()},ConnectionPool.prototype.checkoutConnection=function(e){var t=this.currentConnectionIndex++%this.openConnections.length,n=this.openConnections[t];return n},ConnectionPool.prototype.getAllConnections=function(){return this.openConnections},ConnectionPool.prototype.removeAllEventListeners=function(){this.removeAllListeners("close"),this.removeAllListeners("error"),this.removeAllListeners("timeout"),this.removeAllListeners("connect"),this.removeAllListeners("end"),this.removeAllListeners("parseError"),this.removeAllListeners("message"),this.removeAllListeners("poolReady")};