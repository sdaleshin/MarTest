function opts(e){var t={root:root};if(e)for(var n in e)t[n]=e[n];return t}function capture(){var e={entries:[],errors:[],ended:!1},t=new Stream;return t.writable=!0,t.readable=!0,t.write=function(t){e.entries.push(t)},t.end=function(){e.ended=!0,t.emit("data",e),t.emit("end")},t}var test=require("tap").test,path=require("path"),fs=require("fs"),util=require("util"),Stream=require("stream"),through=require("through"),streamapi=require("../stream-api"),readdirp=require(".."),root=path.join(__dirname,"bed"),totalDirs=6,totalFiles=12,ext1Files=4,ext2Files=3,ext3Files=2;test("\nintegrated",function(e){e.test("\n# reading root without filter",function(e){e.plan(2),readdirp(opts()).on("error",function(n){e.fail("should not throw error",n)}).pipe(capture()).pipe(through(function(n){e.equals(n.entries.length,totalFiles,"emits all files"),e.ok(n.ended,"ends stream"),e.end()}))}),e.test('\n# normal: ["*.ext1", "*.ext3"]',function(e){e.plan(2),readdirp(opts({fileFilter:["*.ext1","*.ext3"]})).on("error",function(n){e.fail("should not throw error",n)}).pipe(capture()).pipe(through(function(n){e.equals(n.entries.length,ext1Files+ext3Files,"all ext1 and ext3 files"),e.ok(n.ended,"ends stream"),e.end()}))}),e.test('\n# negated: ["!*.ext1", "!*.ext3"]',function(e){e.plan(2),readdirp(opts({fileFilter:["!*.ext1","!*.ext3"]})).on("error",function(n){e.fail("should not throw error",n)}).pipe(capture()).pipe(through(function(n){e.equals(n.entries.length,totalFiles-ext1Files-ext3Files,"all but ext1 and ext3 files"),e.ok(n.ended,"ends stream"),e.end()}))}),e.test("\n# no options given",function(e){e.plan(1),readdirp().on("error",function(n){e.similar(n.toString(),/Need to pass at least one argument/,"emits meaningful error"),e.end()})}),e.test('\n# mixed: ["*.ext1", "!*.ext3"]',function(e){e.plan(1),readdirp(opts({fileFilter:["*.ext1","!*.ext3"]})).on("error",function(n){e.similar(n.toString(),/Cannot mix negated with non negated glob filters/,"emits meaningful error"),e.end()})})}),test("\napi separately",function(e){e.test("\n# handleError",function(e){e.plan(1);var t=streamapi(),n=new Error("some file caused problems");t.stream.on("warn",function(t){e.equals(t,n,"warns with the handled error")}),t.handleError(n)}),e.test("\n# when stream is paused and then resumed",function(e){e.plan(6);var t=streamapi(),n=!1,r=new Error("fatal!"),i=new Error("nonfatal!"),s="some data";t.stream.on("warn",function(t){e.equals(t,i,"emits the buffered warning"),e.ok(n,"emits warning only after it was resumed")}).on("error",function(t){e.equals(t,r,"emits the buffered fatal error"),e.ok(n,"emits errors only after it was resumed")}).on("data",function(t){e.equals(t,s,"emits the buffered data"),e.ok(n,"emits data only after it was resumed")}).pause(),t.processEntry(s),t.handleError(i),t.handleFatalError(r),process.nextTick(function(){n=!0,t.stream.resume()})}),e.test('\n# when a stream is destroyed, it emits "closed", but no longer emits "data", "warn" and "error"',function(e){e.plan(6);var t=streamapi(),n=!1,r=new Error("fatal!"),i=new Error("nonfatal!"),s="some data",o=t.stream.on("warn",function(t){e.notOk(n,"emits warning until destroyed")}).on("error",function(t){e.notOk(n,"emits errors until destroyed")}).on("data",function(t){e.notOk(n,"emits data until destroyed")}).on("close",function(){e.ok(n,"emits close when stream is destroyed")});t.processEntry(s),t.handleError(i),t.handleFatalError(r),process.nextTick(function(){n=!0,o.destroy(),e.notOk(o.readable,"stream is no longer readable after it is destroyed"),t.processEntry(s),t.handleError(i),t.handleFatalError(r),process.nextTick(function(){e.pass("emits no more data, warn or error events after it was destroyed")})})})});