function opts(e){var t={root:root};if(e)for(var n in e)t[n]=e[n];return t}var test=require("tap").test,path=require("path"),fs=require("fs"),util=require("util"),readdirp=require("../readdirp.js"),root=path.join(__dirname,"../test/bed"),totalDirs=6,totalFiles=12,ext1Files=4,ext2Files=3,ext3Files=2,rootDir2Files=2,nameHasLength9Dirs=2,depth1Files=8,depth0Files=3;test("\nreading root without filter",function(e){e.plan(2),readdirp(opts(),function(n,r){e.equals(r.directories.length,totalDirs,"all directories"),e.equals(r.files.length,totalFiles,"all files"),e.end()})}),test("\nreading root using glob filter",function(e){e.test('\n# "*.ext1"',function(e){e.plan(1),readdirp(opts({fileFilter:"*.ext1"}),function(n,r){e.equals(r.files.length,ext1Files,"all ext1 files"),e.end()})}),e.test('\n# ["*.ext1", "*.ext3"]',function(e){e.plan(1),readdirp(opts({fileFilter:["*.ext1","*.ext3"]}),function(n,r){e.equals(r.files.length,ext1Files+ext3Files,"all ext1 and ext3 files"),e.end()})}),e.test('\n# "root_dir1"',function(e){e.plan(1),readdirp(opts({directoryFilter:"root_dir1"}),function(n,r){e.equals(r.directories.length,1,"one directory"),e.end()})}),e.test('\n# ["root_dir1", "*dir1_subdir1"]',function(e){e.plan(1),readdirp(opts({directoryFilter:["root_dir1","*dir1_subdir1"]}),function(n,r){e.equals(r.directories.length,2,"two directories"),e.end()})}),e.test('\n# negated: "!*.ext1"',function(e){e.plan(1),readdirp(opts({fileFilter:"!*.ext1"}),function(n,r){e.equals(r.files.length,totalFiles-ext1Files,"all but ext1 files"),e.end()})}),e.test('\n# negated: ["!*.ext1", "!*.ext3"]',function(e){e.plan(1),readdirp(opts({fileFilter:["!*.ext1","!*.ext3"]}),function(n,r){e.equals(r.files.length,totalFiles-ext1Files-ext3Files,"all but ext1 and ext3 files"),e.end()})}),e.test('\n# mixed: ["*.ext1", "!*.ext3"]',function(e){e.plan(1),readdirp(opts({fileFilter:["*.ext1","!*.ext3"]}),function(n,r){e.similar(n[0].toString(),/Cannot mix negated with non negated glob filters/,"returns meaningfull error"),e.end()})}),e.test('\n# leading and trailing spaces: [" *.ext1", "*.ext3 "]',function(e){e.plan(1),readdirp(opts({fileFilter:[" *.ext1","*.ext3 "]}),function(n,r){e.equals(r.files.length,ext1Files+ext3Files,"all ext1 and ext3 files"),e.end()})}),e.test('\n# leading and trailing spaces: [" !*.ext1", " !*.ext3 "]',function(e){e.plan(1),readdirp(opts({fileFilter:[" !*.ext1"," !*.ext3"]}),function(n,r){e.equals(r.files.length,totalFiles-ext1Files-ext3Files,"all but ext1 and ext3 files"),e.end()})}),e.test("\n# ** glob pattern",function(e){e.plan(1),readdirp(opts({fileFilter:"**/*.ext1"}),function(n,r){e.equals(r.files.length,ext1Files,"ignores ** in **/*.ext1 -> only *.ext1 files"),e.end()})})}),test("\n\nreading root using function filter",function(e){e.test('\n# file filter -> "contains root_dir2"',function(e){e.plan(1),readdirp(opts({fileFilter:function(e){return e.name.indexOf("root_dir2")>=0}}),function(n,r){e.equals(r.files.length,rootDir2Files,"all rootDir2Files"),e.end()})}),e.test('\n# directory filter -> "name has length 9"',function(e){e.plan(1),readdirp(opts({directoryFilter:function(e){return e.name.length===9}}),function(n,r){e.equals(r.directories.length,nameHasLength9Dirs,"all all dirs with name length 9"),e.end()})})}),test("\nreading root specifying maximum depth",function(e){e.test("\n# depth 1",function(e){e.plan(1),readdirp(opts({depth:1}),function(n,r){e.equals(r.files.length,depth1Files,"does not return files at depth 2")})})}),test("\nreading root with no recursion",function(e){e.test("\n# depth 0",function(e){e.plan(1),readdirp(opts({depth:0}),function(n,r){e.equals(r.files.length,depth0Files,"does not return files at depth 0")})})}),test("\nprogress callbacks",function(e){e.plan(2);var t=function(e){return e.name},n=[];readdirp(opts(),function(e){n.push(e)},function(r,i){e.equals(n.length,i.files.length,"calls back for each file processed"),e.deepEquals(n.map(t).sort(),i.files.map(t).sort(),"same file names"),e.end()})}),test("resolving of name, full and relative paths",function(e){var t={name:"root_dir1_file1.ext1",parentDirName:"root_dir1",path:"root_dir1/root_dir1_file1.ext1",fullPath:"test/bed/root_dir1/root_dir1_file1.ext1"},n=[{root:"./bed",prefix:""},{root:"./bed/",prefix:""},{root:"bed",prefix:""},{root:"bed/",prefix:""},{root:"../test/bed/",prefix:""},{root:".",prefix:"bed"}];e.plan(n.length),n.forEach(function(n){n.fileFilter="root_dir1_file1.ext1",e.test("\n"+util.inspect(n),function(e){e.plan(4),readdirp(n,function(r,i){e.equals(i.files[0].name,t.name,"correct name"),e.equals(i.files[0].path,path.join(n.prefix,t.path),"correct path")}),fs.realpath(n.root,function(r,i){readdirp(n,function(r,s){e.equals(s.files[0].fullParentDir,path.join(i,n.prefix,t.parentDirName),"correct parentDir"),e.equals(s.files[0].fullPath,path.join(i,n.prefix,t.parentDirName,t.name),"correct fullPath")})})})})});